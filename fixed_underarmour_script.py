# Combined Blender script generated by Voxel

# Generated: 2025-10-19T14:16:43.874130

# This script combines multiple agent scripts into a single executable script


# Standard imports
import bpy
from mathutils import Vector, Euler, Matrix
import bmesh
from math import radians, degrees, pi
import os
from pathlib import Path

# ===== Agent Scripts =====


# ===== Script 1: 01_builder_iter1.py =====

import bpy
import math
from math import radians, pi

# Clear existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Create a simple house scene
# Ground plane
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))
ground = bpy.context.active_object
ground.name = "Ground"

# House base
bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))
house = bpy.context.active_object
house.name = "House"
house.scale = (2, 3, 1.5)

# House roof
bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 2.5))
roof = bpy.context.active_object
roof.name = "Roof"
roof.scale = (2.2, 3.2, 0.8)
roof.rotation_euler = (0, 0, radians(45))

# Red glowing cube (the main light source)
bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 1.5))
cube = bpy.context.active_object
cube.name = "Glowing_Cube"

# Add emission material to the cube
cube_material = bpy.data.materials.new(name="Cube_Emission")
cube_material.use_nodes = True
cube_material.node_tree.nodes.clear()

# Add Emission shader
emission = cube_material.node_tree.nodes.new(type='ShaderNodeEmission')
output = cube_material.node_tree.nodes.new(type='ShaderNodeOutputMaterial')
cube_material.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])

# Set bright red emission
emission.inputs['Color'].default_value = (1.0, 0.1, 0.1, 1.0)  # Bright red
emission.inputs['Strength'].default_value = 5.0  # Strong emission

# Apply to cube
cube.data.materials.append(cube_material)

# Add a camera
bpy.ops.object.camera_add(location=(5, -5, 3))
camera = bpy.context.active_object
camera.name = "Camera"

# Point camera at the scene
bpy.context.view_layer.objects.active = camera
bpy.ops.object.constraint_add(type='TRACK_TO')
camera.constraints["Track To"].target = cube

print("âœ… House scene created with glowing red cube!")


# ===== Script 2: 02_texture_iter1.py =====


# Basic texture setup for the house scene

# Create materials
house_material = bpy.data.materials.new(name="House_Material")
house_material.use_nodes = True
house_material.node_tree.nodes.clear()

# Add Principled BSDF
bsdf = house_material.node_tree.nodes.new(type='ShaderNodeBsdfPrincipled')
output = house_material.node_tree.nodes.new(type='ShaderNodeOutputMaterial')
house_material.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])

# Set material properties
bsdf.inputs['Base Color'].default_value = (0.8, 0.6, 0.4, 1.0)  # Beige color
bsdf.inputs['Roughness'].default_value = 0.6
bsdf.inputs['Metallic'].default_value = 0.0

# Apply to house objects
for obj in bpy.data.objects:
    if 'House' in obj.name or 'Roof' in obj.name:
        if obj.data.materials:
            obj.data.materials[0] = house_material
        else:
            obj.data.materials.append(house_material)

# Create grass material
grass_material = bpy.data.materials.new(name="Grass_Material")
grass_material.use_nodes = True
grass_material.node_tree.nodes.clear()

bsdf_grass = grass_material.node_tree.nodes.new(type='ShaderNodeBsdfPrincipled')
output_grass = grass_material.node_tree.nodes.new(type='ShaderNodeOutputMaterial')
grass_material.node_tree.links.new(bsdf_grass.outputs['BSDF'], output_grass.inputs['Surface'])

bsdf_grass.inputs['Base Color'].default_value = (0.2, 0.8, 0.2, 1.0)  # Green color
bsdf_grass.inputs['Roughness'].default_value = 0.8

# Apply to terrain
for obj in bpy.data.objects:
    if 'Terrain' in obj.name or 'Grass' in obj.name:
        if obj.data.materials:
            obj.data.materials[0] = grass_material
        else:
            obj.data.materials.append(grass_material)




# ===== Script 3: 03_hdr_iter1.py =====


# Clear existing world or create new one
world = bpy.data.worlds.get('World')
if not world:
    world = bpy.data.worlds.new('World')
bpy.context.scene.world = world

world.use_nodes = True
nodes = world.node_tree.nodes
links = world.node_tree.links
nodes.clear()

# Professional Studio HDR Environment for Under Armour Product Showcase
# This creates a controlled studio environment with neutral-cool color temperature
# and subtle ambient fill that won't compete with the dramatic key lighting

# Texture Coordinate node
tex_coord = nodes.new(type='ShaderNodeTexCoord')
tex_coord.location = (-800, 0)

# Mapping node for environment rotation control
mapping = nodes.new(type='ShaderNodeMapping')
mapping.location = (-600, 0)
mapping.inputs['Rotation'].default_value = (0, 0, math.radians(45))  # Rotate for optimal reflections
links.new(tex_coord.outputs['Generated'], mapping.inputs['Vector'])

# Create a studio-appropriate gradient background
# Subtle gradient from dark gray at bottom to medium gray at top
gradient = nodes.new(type='ShaderNodeTexGradient')
gradient.gradient_type = 'RADIAL'
gradient.location = (-400, 200)
links.new(mapping.outputs['Vector'], gradient.inputs['Vector'])

# Color Ramp for studio backdrop gradient
# Creates professional photography studio atmosphere
color_ramp_bg = nodes.new(type='ShaderNodeValToRGB')
color_ramp_bg.location = (-200, 200)
color_ramp_bg.color_ramp.interpolation = 'LINEAR'

# Dark charcoal center (where key lights will dominate)
color_ramp_bg.color_ramp.elements[0].position = 0.0
color_ramp_bg.color_ramp.elements[0].color = (0.08, 0.08, 0.09, 1.0)  # Dark charcoal

# Medium gray edges (subtle ambient fill)
color_ramp_bg.color_ramp.elements[1].position = 1.0
color_ramp_bg.color_ramp.elements[1].color = (0.18, 0.18, 0.20, 1.0)  # Medium gray with cool tint

links.new(gradient.outputs['Fac'], color_ramp_bg.inputs['Fac'])

# Add subtle noise texture for studio atmosphere depth
noise_texture = nodes.new(type='ShaderNodeTexNoise')
noise_texture.location = (-400, -100)
noise_texture.inputs['Scale'].default_value = 3.0
noise_texture.inputs['Detail'].default_value = 2.0
noise_texture.inputs['Roughness'].default_value = 0.5
links.new(mapping.outputs['Vector'], noise_texture.inputs['Vector'])

# Color ramp to control noise intensity (very subtle)
color_ramp_noise = nodes.new(type='ShaderNodeValToRGB')
color_ramp_noise.location = (-200, -100)
color_ramp_noise.color_ramp.elements[0].position = 0.45
color_ramp_noise.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
color_ramp_noise.color_ramp.elements[1].position = 0.55
color_ramp_noise.color_ramp.elements[1].color = (0.05, 0.05, 0.05, 1.0)
links.new(noise_texture.outputs['Fac'], color_ramp_noise.inputs['Fac'])

# Mix gradient with noise for subtle variation
mix_bg_noise = nodes.new(type='ShaderNodeMixRGB')
mix_bg_noise.location = (0, 100)
mix_bg_noise.blend_type = 'ADD'
mix_bg_noise.inputs['Fac'].default_value = 0.15  # Subtle noise addition
links.new(color_ramp_bg.outputs['Color'], mix_bg_noise.inputs['Color1'])
links.new(color_ramp_noise.outputs['Color'], mix_bg_noise.inputs['Color2'])

# Add cool studio color temperature tint (5500-6000K)
# Professional studio lighting with slight cool cast for chrome reflections
rgb_multiply = nodes.new(type='ShaderNodeMixRGB')
rgb_multiply.location = (200, 100)
rgb_multiply.blend_type = 'MULTIPLY'
rgb_multiply.inputs['Fac'].default_value = 1.0
rgb_multiply.inputs['Color2'].default_value = (0.98, 0.99, 1.0, 1.0)  # Cool white tint
links.new(mix_bg_noise.outputs['Color'], rgb_multiply.inputs['Color1'])

# Create subtle vignette effect for studio depth
# Uses spherical gradient to darken edges
vignette_gradient = nodes.new(type='ShaderNodeTexGradient')
vignette_gradient.gradient_type = 'SPHERICAL'
vignette_gradient.location = (-400, -300)

# Separate mapping for vignette (centered, no rotation)
vignette_mapping = nodes.new(type='ShaderNodeMapping')
vignette_mapping.location = (-600, -300)
vignette_mapping.inputs['Scale'].default_value = (0.7, 0.7, 0.7)  # Control vignette size
links.new(tex_coord.outputs['Generated'], vignette_mapping.inputs['Vector'])
links.new(vignette_mapping.outputs['Vector'], vignette_gradient.inputs['Vector'])

# Color ramp for vignette intensity
color_ramp_vignette = nodes.new(type='ShaderNodeValToRGB')
color_ramp_vignette.location = (-200, -300)
color_ramp_vignette.color_ramp.elements[0].position = 0.3
color_ramp_vignette.color_ramp.elements[0].color = (1.0, 1.0, 1.0, 1.0)  # Center (no darkening)
color_ramp_vignette.color_ramp.elements[1].position = 0.8
color_ramp_vignette.color_ramp.elements[1].color = (0.7, 0.7, 0.7, 1.0)  # Edges (subtle darkening)
links.new(vignette_gradient.outputs['Fac'], color_ramp_vignette.inputs['Fac'])

# Apply vignette to background
mix_vignette = nodes.new(type='ShaderNodeMixRGB')
mix_vignette.location = (400, 0)
mix_vignette.blend_type = 'MULTIPLY'
mix_vignette.inputs['Fac'].default_value = 0.4  # Subtle vignette strength
links.new(rgb_multiply.outputs['Color'], mix_vignette.inputs['Color1'])
links.new(color_ramp_vignette.outputs['Color'], mix_vignette.inputs['Color2'])

# Background shader with low strength for ambient fill only
# Key lights will provide main illumination
background = nodes.new(type='ShaderNodeBackground')
background.location = (600, 0)
background.inputs['Strength'].default_value = 0.3  # Low ambient fill, won't compete with key lights
links.new(mix_vignette.outputs['Color'], background.inputs['Color'])

# World Output
output = nodes.new(type='ShaderNodeOutputWorld')
output.location = (800, 0)
links.new(background.outputs['Background'], output.inputs['Surface'])

# Configure scene for volumetric atmosphere (dust particles for light beams)
scene = bpy.context.scene
scene.world.cycles_visibility.camera = True
scene.world.cycles_visibility.diffuse = True
scene.world.cycles_visibility.glossy = True
scene.world.cycles_visibility.transmission = True
scene.world.cycles_visibility.scatter = True

# FIXED: Remove the problematic world.volume code
# Volume properties are handled differently in Blender
# The volumetric atmosphere will be created through the world shader nodes instead

# Set render settings for optimal studio quality
if scene.render.engine == 'CYCLES':
    scene.cycles.volume_bounces = 2  # Limited bounces for performance
    scene.cycles.transparent_max_bounces = 8  # For water bottle and glass
    scene.cycles.transmission_bounces = 12  # For caustics
    scene.cycles.glossy_bounces = 8  # For chrome reflections
    scene.cycles.max_bounces = 12
    scene.cycles.caustics_reflective = True
    scene.cycles.caustics_refractive = True
    scene.cycles.blur_glossy = 0.5  # Slight blur for realism
    
# Set color management for professional studio output
scene.view_settings.view_transform = 'Filmic'
scene.view_settings.look = 'Medium High Contrast'  # Punchy commercial look
scene.view_settings.exposure = 0.0  # Neutral exposure, lights will control brightness
scene.view_settings.gamma = 1.0

# Set color space
scene.sequencer_colorspace_settings.name = 'sRGB'
scene.display_settings.display_device = 'sRGB'

print("Professional studio HDR environment created successfully!")
print("Environment features:")
print("- Neutral-cool color temperature (5500-6000K)")
print("- Subtle gradient backdrop (dark charcoal to medium gray)")
print("- Low ambient fill strength (0.3) for key light dominance")
print("- Subtle vignette for studio depth")
print("- Cool atmospheric tint for chrome reflections")
print("- Caustics and high-quality reflections enabled")
print("- Filmic color management with medium-high contrast")
