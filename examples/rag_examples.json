{
  "examples": [
    {
      "prompt": "a cyberpunk character with neon lights",
      "concept": "A futuristic humanoid character in a cyberpunk setting with glowing neon accents, metallic clothing, and dramatic lighting",
      "builder_script": "\n# Character Builder Script\nimport bpy\nimport bmesh\n\n# Clear existing mesh\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Create humanoid base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.active_object\nbody.name = \"Character_Body\"\n\n# Add head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 2.5))\nhead = bpy.context.active_object\nhead.name = \"Character_Head\"\n\n# Add arms\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 1.5))\narm_l = bpy.context.active_object\narm_l.name = \"Character_Arm_L\"\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 1.5))\narm_r = bpy.context.active_object\narm_r.name = \"Character_Arm_R\"\n\nprint(\"Character geometry created\")\n",
      "texture_script": "\n# Cyberpunk Texture Script\nimport bpy\n\n# Create cyberpunk material\ncyberpunk_mat = bpy.data.materials.new(name=\"Cyberpunk_Material\")\ncyberpunk_mat.use_nodes = True\ncyberpunk_mat.node_tree.nodes.clear()\n\n# Add nodes\noutput = cyberpunk_mat.node_tree.nodes.new('ShaderNodeOutputMaterial')\nprincipled = cyberpunk_mat.node_tree.nodes.new('ShaderNodeBsdfPrincipled')\nemission = cyberpunk_mat.node_tree.nodes.new('ShaderNodeEmission')\nmix = cyberpunk_mat.node_tree.nodes.new('ShaderNodeMixShader')\n\n# Set up connections\ncyberpunk_mat.node_tree.links.new(principled.outputs['BSDF'], mix.inputs[1])\ncyberpunk_mat.node_tree.links.new(emission.outputs['Emission'], mix.inputs[2])\ncyberpunk_mat.node_tree.links.new(mix.outputs['Shader'], output.inputs['Surface'])\n\n# Set cyberpunk colors\nprincipled.inputs['Base Color'].default_value = (0.1, 0.1, 0.3, 1.0)  # Dark blue\nprincipled.inputs['Metallic'].default_value = 0.8\nprincipled.inputs['Roughness'].default_value = 0.2\nemission.inputs['Color'].default_value = (0.0, 0.5, 1.0, 1.0)  # Neon blue\nemission.inputs['Strength'].default_value = 2.0\n\nprint(\"Cyberpunk materials applied\")\n",
      "render_script": "\n# Cyberpunk Render Script\nimport bpy\n\n# Set up camera\nbpy.ops.object.camera_add(location=(5, -5, 3))\ncamera = bpy.context.active_object\ncamera.rotation_euler = (1.1, 0, 0.785)\nbpy.context.scene.camera = camera\n\n# Add neon lighting\nbpy.ops.object.light_add(type='AREA', location=(2, 2, 4))\nlight1 = bpy.context.active_object\nlight1.data.energy = 100\nlight1.data.color = (0.0, 0.5, 1.0)  # Neon blue\n\nbpy.ops.object.light_add(type='AREA', location=(-2, -2, 4))\nlight2 = bpy.context.active_object\nlight2.data.energy = 100\nlight2.data.color = (1.0, 0.0, 0.5)  # Neon pink\n\n# Set render settings\nscene = bpy.context.scene\nscene.render.engine = 'CYCLES'\nscene.cycles.samples = 128\nscene.render.resolution_x = 1920\nscene.render.resolution_y = 1080\n\nprint(\"Cyberpunk lighting and render setup complete\")\n",
      "animation_script": "\n# Character Walk Animation Script\nimport bpy\n\n# Set animation range\nbpy.context.scene.frame_start = 1\nbpy.context.scene.frame_end = 60\n\n# Get character objects\ncharacter = bpy.data.objects.get(\"Character_Body\")\nif character:\n    # Animate body movement\n    character.location = (0, 0, 1)\n    character.keyframe_insert(data_path=\"location\", frame=1)\n    \n    character.location = (2, 0, 1)\n    character.keyframe_insert(data_path=\"location\", frame=30)\n    \n    character.location = (4, 0, 1)\n    character.keyframe_insert(data_path=\"location\", frame=60)\n    \n    # Add rotation\n    character.rotation_euler = (0, 0, 0)\n    character.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n    \n    character.rotation_euler = (0, 0, 0.1)\n    character.keyframe_insert(data_path=\"rotation_euler\", frame=30)\n    \n    character.rotation_euler = (0, 0, 0)\n    character.keyframe_insert(data_path=\"rotation_euler\", frame=60)\n\nprint(\"Character walk animation created\")\n",
      "rigging_script": "\n# Character Rigging Script\nimport bpy\n\n# Create armature\nbpy.ops.object.armature_add(location=(0, 0, 0))\narmature = bpy.context.active_object\narmature.name = \"Character_Armature\"\n\n# Enter edit mode\nbpy.context.view_layer.objects.active = armature\nbpy.ops.object.mode_set(mode='EDIT')\n\n# Create bones\nbones = armature.data.edit_bones\n\n# Root bone\nroot = bones.new(\"Root\")\nroot.head = (0, 0, 0)\nroot.tail = (0, 0, 1)\n\n# Spine\nspine = bones.new(\"Spine\")\nspine.head = (0, 0, 1)\nspine.tail = (0, 0, 2)\nspine.parent = root\n\n# Head\nhead_bone = bones.new(\"Head\")\nhead_bone.head = (0, 0, 2)\nhead_bone.tail = (0, 0, 2.5)\nhead_bone.parent = spine\n\n# Left arm\narm_l = bones.new(\"Arm_L\")\narm_l.head = (0, 0, 1.5)\narm_l.tail = (1, 0, 1.5)\narm_l.parent = spine\n\n# Right arm\narm_r = bones.new(\"Arm_R\")\narm_r.head = (0, 0, 1.5)\narm_r.tail = (-1, 0, 1.5)\narm_r.parent = spine\n\n# Exit edit mode\nbpy.ops.object.mode_set(mode='OBJECT')\n\nprint(\"Character armature created\")\n",
      "compositing_script": "\n# Cyberpunk Compositing Script\nimport bpy\n\n# Enable compositing\nscene = bpy.context.scene\nscene.use_nodes = True\nscene.node_tree.nodes.clear()\n\n# Add nodes\nrender_layers = scene.node_tree.nodes.new('CompositorNodeRLayers')\ncomposite = scene.node_tree.nodes.new('CompositorNodeComposite')\nviewer = scene.node_tree.nodes.new('CompositorNodeViewer')\n\n# Add glow effect\nglare = scene.node_tree.nodes.new('CompositorNodeGlare')\nglare.glare_type = 'FOG_GLOW'\nglare.quality = 'HIGH'\n\n# Add color correction\ncolor_correct = scene.node_tree.nodes.new('CompositorNodeColorBalance')\ncolor_correct.lift = (1.1, 1.0, 1.2)\ncolor_correct.gamma = (1.2, 1.0, 0.9)\ncolor_correct.gain = (1.1, 1.0, 1.1)\n\n# Connect nodes\nlinks = scene.node_tree.links\nlinks.new(render_layers.outputs['Image'], glare.inputs['Image'])\nlinks.new(glare.outputs['Image'], color_correct.inputs['Color'])\nlinks.new(color_correct.outputs['Color'], composite.inputs['Image'])\nlinks.new(color_correct.outputs['Color'], viewer.inputs['Image'])\n\nprint(\"Cyberpunk compositing setup complete\")\n",
      "sequence_script": null,
      "tags": [
        "character",
        "cyberpunk",
        "neon",
        "humanoid",
        "rigging"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.223404"
    },
    {
      "prompt": "a medieval knight in armor",
      "concept": "A heroic knight wearing detailed metal armor with chainmail, holding a sword, in a medieval fantasy setting",
      "builder_script": "# Knight Builder Script\nimport bpy\n# Create knight geometry\nprint('Knight created')",
      "texture_script": "# Armor Texture Script\nimport bpy\n# Apply metallic armor materials\nprint('Armor materials applied')",
      "render_script": "# Medieval Render Script\nimport bpy\n# Set up medieval lighting\nprint('Medieval lighting setup')",
      "animation_script": "# Knight Combat Animation\nimport bpy\n# Create sword fighting animation\nprint('Combat animation created')",
      "rigging_script": "# Knight Rigging Script\nimport bpy\n# Create knight armature\nprint('Knight armature created')",
      "compositing_script": "# Medieval Compositing Script\nimport bpy\n# Set up medieval post-processing\nprint('Medieval compositing setup')",
      "sequence_script": null,
      "tags": [
        "character",
        "medieval",
        "armor",
        "knight",
        "fantasy"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.223784"
    },
    {
      "prompt": "a cute cartoon animal",
      "concept": "A friendly cartoon-style animal character with big eyes, soft features, and vibrant colors",
      "builder_script": "# Cartoon Animal Script\nimport bpy\n# Create cute cartoon animal\nprint('Cartoon animal created')",
      "texture_script": "# Cartoon Texture Script\nimport bpy\n# Apply bright cartoon materials\nprint('Cartoon materials applied')",
      "render_script": "# Cartoon Render Script\nimport bpy\n# Set up cartoon lighting\nprint('Cartoon lighting setup')",
      "animation_script": "# Cartoon Bounce Animation\nimport bpy\n# Create bouncy animation\nprint('Bounce animation created')",
      "rigging_script": "# Cartoon Rigging Script\nimport bpy\n# Create simple cartoon rig\nprint('Cartoon rig created')",
      "compositing_script": "# Cartoon Compositing Script\nimport bpy\n# Set up cartoon post-processing\nprint('Cartoon compositing setup')",
      "sequence_script": null,
      "tags": [
        "character",
        "cartoon",
        "cute",
        "animal",
        "stylized"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.224046"
    },
    {
      "prompt": "a cozy forest cabin",
      "concept": "A rustic wooden cabin surrounded by tall pine trees, with warm lighting from windows and a stone chimney",
      "builder_script": "# Cabin Builder Script\nimport bpy\n# Create forest cabin\nprint('Cabin created')",
      "texture_script": "# Wood Texture Script\nimport bpy\n# Apply wood materials\nprint('Wood materials applied')",
      "render_script": "# Forest Render Script\nimport bpy\n# Set up forest lighting\nprint('Forest lighting setup')",
      "animation_script": "# Wind Animation Script\nimport bpy\n# Create wind effects\nprint('Wind animation created')",
      "rigging_script": null,
      "compositing_script": "# Forest Compositing Script\nimport bpy\n# Set up forest post-processing\nprint('Forest compositing setup')",
      "sequence_script": null,
      "tags": [
        "environment",
        "forest",
        "cabin",
        "nature",
        "cozy"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.224301"
    },
    {
      "prompt": "a futuristic city skyline",
      "concept": "A sprawling cyberpunk city with towering skyscrapers, neon lights, flying vehicles, and atmospheric fog",
      "builder_script": "# City Builder Script\nimport bpy\n# Create futuristic city\nprint('City created')",
      "texture_script": "# Metallic Texture Script\nimport bpy\n# Apply metallic materials\nprint('Metallic materials applied')",
      "render_script": "# City Render Script\nimport bpy\n# Set up city lighting\nprint('City lighting setup')",
      "animation_script": "# City Animation Script\nimport bpy\n# Create city animation\nprint('City animation created')",
      "rigging_script": null,
      "compositing_script": "# City Compositing Script\nimport bpy\n# Set up city post-processing\nprint('City compositing setup')",
      "sequence_script": null,
      "tags": [
        "environment",
        "city",
        "futuristic",
        "cyberpunk",
        "urban"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.224540"
    },
    {
      "prompt": "a magical garden",
      "concept": "An enchanted garden with glowing flowers, floating crystals, magical particles, and ethereal lighting",
      "builder_script": "# Garden Builder Script\nimport bpy\n# Create magical garden\nprint('Magical garden created')",
      "texture_script": "# Magical Texture Script\nimport bpy\n# Apply magical materials\nprint('Magical materials applied')",
      "render_script": "# Magical Render Script\nimport bpy\n# Set up magical lighting\nprint('Magical lighting setup')",
      "animation_script": "# Magical Particles Script\nimport bpy\n# Create magical particles\nprint('Magical particles created')",
      "rigging_script": null,
      "compositing_script": "# Magical Compositing Script\nimport bpy\n# Set up magical post-processing\nprint('Magical compositing setup')",
      "sequence_script": null,
      "tags": [
        "environment",
        "magical",
        "garden",
        "fantasy",
        "glowing"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.224791"
    },
    {
      "prompt": "geometric abstract art",
      "concept": "A composition of geometric shapes with vibrant colors, clean lines, and mathematical precision",
      "builder_script": "# Geometric Builder Script\nimport bpy\n# Create geometric shapes\nprint('Geometric shapes created')",
      "texture_script": "# Abstract Texture Script\nimport bpy\n# Apply abstract materials\nprint('Abstract materials applied')",
      "render_script": "# Abstract Render Script\nimport bpy\n# Set up abstract lighting\nprint('Abstract lighting setup')",
      "animation_script": "# Geometric Animation Script\nimport bpy\n# Create geometric animation\nprint('Geometric animation created')",
      "rigging_script": null,
      "compositing_script": "# Abstract Compositing Script\nimport bpy\n# Set up abstract post-processing\nprint('Abstract compositing setup')",
      "sequence_script": null,
      "tags": [
        "abstract",
        "geometric",
        "art",
        "mathematical",
        "colorful"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.225279"
    },
    {
      "prompt": "fluid organic shapes",
      "concept": "Smooth, flowing organic forms with liquid-like properties, soft lighting, and natural colors",
      "builder_script": "# Organic Builder Script\nimport bpy\n# Create organic shapes\nprint('Organic shapes created')",
      "texture_script": "# Organic Texture Script\nimport bpy\n# Apply organic materials\nprint('Organic materials applied')",
      "render_script": "# Organic Render Script\nimport bpy\n# Set up organic lighting\nprint('Organic lighting setup')",
      "animation_script": "# Fluid Animation Script\nimport bpy\n# Create fluid animation\nprint('Fluid animation created')",
      "rigging_script": null,
      "compositing_script": "# Organic Compositing Script\nimport bpy\n# Set up organic post-processing\nprint('Organic compositing setup')",
      "sequence_script": null,
      "tags": [
        "abstract",
        "organic",
        "fluid",
        "natural",
        "smooth"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.225572"
    },
    {
      "prompt": "a detailed mechanical robot",
      "concept": "A complex robotic assembly with visible gears, pistons, hydraulic systems, and metallic surfaces",
      "builder_script": "# Robot Builder Script\nimport bpy\n# Create mechanical robot\nprint('Robot created')",
      "texture_script": "# Mechanical Texture Script\nimport bpy\n# Apply mechanical materials\nprint('Mechanical materials applied')",
      "render_script": "# Mechanical Render Script\nimport bpy\n# Set up mechanical lighting\nprint('Mechanical lighting setup')",
      "animation_script": "# Robot Animation Script\nimport bpy\n# Create robot animation\nprint('Robot animation created')",
      "rigging_script": "# Robot Rigging Script\nimport bpy\n# Create robot armature\nprint('Robot armature created')",
      "compositing_script": "# Mechanical Compositing Script\nimport bpy\n# Set up mechanical post-processing\nprint('Mechanical compositing setup')",
      "sequence_script": null,
      "tags": [
        "technical",
        "robot",
        "mechanical",
        "industrial",
        "complex"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.225880"
    },
    {
      "prompt": "a spaceship interior",
      "concept": "A futuristic spacecraft interior with control panels, holographic displays, and sci-fi technology",
      "builder_script": "# Spaceship Builder Script\nimport bpy\n# Create spaceship interior\nprint('Spaceship created')",
      "texture_script": "# Sci-Fi Texture Script\nimport bpy\n# Apply sci-fi materials\nprint('Sci-fi materials applied')",
      "render_script": "# Sci-Fi Render Script\nimport bpy\n# Set up sci-fi lighting\nprint('Sci-fi lighting setup')",
      "animation_script": "# Hologram Animation Script\nimport bpy\n# Create hologram effects\nprint('Hologram animation created')",
      "rigging_script": "",
      "compositing_script": "# Sci-Fi Compositing Script\nimport bpy\n# Set up sci-fi post-processing\nprint('Sci-fi compositing setup')",
      "sequence_script": null,
      "tags": [
        "technical",
        "spaceship",
        "sci-fi",
        "interior",
        "futuristic"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.226204"
    },
    {
      "prompt": "a painterly landscape",
      "concept": "A stylized landscape with brushstroke-like textures, impressionistic colors, and artistic lighting",
      "builder_script": "# Landscape Builder Script\nimport bpy\n# Create painterly landscape\nprint('Landscape created')",
      "texture_script": "# Painterly Texture Script\nimport bpy\n# Apply painterly materials\nprint('Painterly materials applied')",
      "render_script": "# Artistic Render Script\nimport bpy\n# Set up artistic lighting\nprint('Artistic lighting setup')",
      "animation_script": "# Cloud Animation Script\nimport bpy\n# Create cloud movement\nprint('Cloud animation created')",
      "rigging_script": null,
      "compositing_script": "# Painterly Compositing Script\nimport bpy\n# Set up painterly post-processing\nprint('Painterly compositing setup')",
      "sequence_script": null,
      "tags": [
        "artistic",
        "landscape",
        "painterly",
        "stylized",
        "impressionistic"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.226491"
    },
    {
      "prompt": "a steampunk contraption",
      "concept": "A Victorian-era mechanical device with brass, copper, gears, steam pipes, and industrial aesthetics",
      "builder_script": "# Steampunk Builder Script\nimport bpy\n# Create steampunk contraption\nprint('Steampunk contraption created')",
      "texture_script": "# Steampunk Texture Script\nimport bpy\n# Apply steampunk materials\nprint('Steampunk materials applied')",
      "render_script": "# Steampunk Render Script\nimport bpy\n# Set up steampunk lighting\nprint('Steampunk lighting setup')",
      "animation_script": "# Gear Animation Script\nimport bpy\n# Create gear rotation\nprint('Gear animation created')",
      "rigging_script": null,
      "compositing_script": "# Steampunk Compositing Script\nimport bpy\n# Set up steampunk post-processing\nprint('Steampunk compositing setup')",
      "sequence_script": null,
      "tags": [
        "artistic",
        "steampunk",
        "victorian",
        "mechanical",
        "brass"
      ],
      "quality_score": 0.0,
      "created_at": "2025-10-18T01:31:43.226759"
    }
  ],
  "patterns": [
    {
      "pattern_type": "material",
      "description": "Emission material for glowing objects",
      "node_types": [
        "Emission",
        "ColorRamp",
        "NoiseTexture"
      ],
      "usage_context": "glowing, neon, or light-emitting materials",
      "success_rate": 0.0,
      "usage_count": 0
    },
    {
      "pattern_type": "animation",
      "description": "Rotation animation pattern",
      "node_types": [
        "rotation_euler"
      ],
      "usage_context": "rotating objects",
      "success_rate": 0.0,
      "usage_count": 0
    }
  ]
}