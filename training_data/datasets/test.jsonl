{"prompt": "Create a cube and apply these modifiers: WAVE, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.067395349745928, -3.241392645632054, 3.2945443299141433) over 197 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.07, -3.24, 3.29)\n    obj.keyframe_insert(data_path=\"location\", frame=197)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: sphere, cone, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane at location 0.1, -2.7, 0.7 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.09, -2.68, 0.65))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.58, 0.58, 0.58)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone at location -5.0, -1.3, 1.7 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.95, -1.28, 1.69))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.87, 1.87, 1.87)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.642, 0.639, 0.742, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.876\nbsdf.inputs['Metallic'].default_value = 0.055\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cylinder, torus, cone, plane, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.368703865762568, -4.6043066309236425, 4.461873895776407) over 172 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.37, -4.60, 4.46)\n    obj.keyframe_insert(data_path=\"location\", frame=172)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube at location -3.6, -2.9, 2.0 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-3.57, -2.87, 1.97))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.11, 1.11, 1.11)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus at location 3.8, 0.8, 0.4 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.82, 0.80, 0.45))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.03, 1.03, 1.03)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.264791799565215, -0.8378808954132344, 4.603637935697023) over 206 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.26, -0.84, 4.60)\n    obj.keyframe_insert(data_path=\"location\", frame=206)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.508, 0.139, 0.830, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.444\nbsdf.inputs['Metallic'].default_value = 0.508\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.929131888050211, 4.468327466085887, 3.5592015756802464) over 219 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.93, 4.47, 3.56)\n    obj.keyframe_insert(data_path=\"location\", frame=219)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: plane, cube, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: cylinder, cube, torus, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 0.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.338, 0.718, 0.809, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.777\nbsdf.inputs['Metallic'].default_value = 0.973\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube at location -0.8, -0.5, 2.1 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-0.81, -0.55, 2.10))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.60, 1.60, 1.60)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 3 objects: sphere, cone, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.37089466736849, -0.01987896392985533, 3.335909525341153) over 232 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.37, -0.02, 3.34)\n    obj.keyframe_insert(data_path=\"location\", frame=232)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.375424432177903, 2.047005175449269, 4.667780432364184) over 141 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.38, 2.05, 4.67)\n    obj.keyframe_insert(data_path=\"location\", frame=141)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.792098246775833, -4.490609636410584, 1.4233224514422775) over 208 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.79, -4.49, 1.42)\n    obj.keyframe_insert(data_path=\"location\", frame=208)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.055, 0.977, 0.727, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.531\nbsdf.inputs['Metallic'].default_value = 0.712\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.630, 0.667, 0.406, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.989\nbsdf.inputs['Metallic'].default_value = 0.606\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.782105871179885, -3.789526979207949, 3.710449072237983) over 219 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.78, -3.79, 3.71)\n    obj.keyframe_insert(data_path=\"location\", frame=219)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube at location -5.0, -1.7, 1.0 with scale 0.9", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-4.98, -1.72, 0.95))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.91, 0.91, 0.91)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 4 objects: cube, torus, sphere, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: torus, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location 1.8, -4.1, 1.9 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(1.84, -4.10, 1.91))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.90, 1.90, 1.90)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: DECIMATE, SUBDIVISION_SURFACE, SOLIDIFY", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 3\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.904229793008032, 3.4394730009939067, 0.015212232867820585) over 108 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.90, 3.44, 0.02)\n    obj.keyframe_insert(data_path=\"location\", frame=108)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.847, 0.376, 0.376, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.147\nbsdf.inputs['Metallic'].default_value = 0.537\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: SKIN, BOOLEAN, WAVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus and apply these modifiers: BOOLEAN, BEVEL, REMESH", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.063\nbevel_mod.segments = 2\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: cone, cylinder, sphere, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 0.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus at location -1.8, -2.1, 1.9 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-1.80, -2.13, 1.94))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.38, 1.38, 1.38)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 5 objects: cylinder, plane, cone, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: cube, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -2.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.678378374840491, 4.118217808033432, 0.5647021396495255) over 196 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.68, 4.12, 0.56)\n    obj.keyframe_insert(data_path=\"location\", frame=196)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.783407030194223, -1.2244441637035184, 3.9891749509658263) over 155 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.78, -1.22, 3.99)\n    obj.keyframe_insert(data_path=\"location\", frame=155)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.283, 0.847, 0.409, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.628\nbsdf.inputs['Metallic'].default_value = 0.345\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.540079452956362, -2.631710096351021, 1.7209517699265646) over 191 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.54, -2.63, 1.72)\n    obj.keyframe_insert(data_path=\"location\", frame=191)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.928, 0.241, 0.051, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.378\nbsdf.inputs['Metallic'].default_value = 0.198\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: BOOLEAN, DISPLACE, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.012824522231495, 4.160441014006963, 2.8115477829084323) over 74 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.01, 4.16, 2.81)\n    obj.keyframe_insert(data_path=\"location\", frame=74)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location -3.4, 3.5, 2.1 with scale 1.3", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-3.37, 3.46, 2.11))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.35, 1.35, 1.35)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: WIREFRAME, DECIMATE, SOLIDIFY", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.002, 0.432, 0.960, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.297\nbsdf.inputs['Metallic'].default_value = 0.637\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.769505821623547, -4.67521936550919, 4.5677546914741525) over 220 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.77, -4.68, 4.57)\n    obj.keyframe_insert(data_path=\"location\", frame=220)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.834858142647359, 1.270490697003904, 2.838329013690596) over 164 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.83, 1.27, 2.84)\n    obj.keyframe_insert(data_path=\"location\", frame=164)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.504, 0.273, 0.318, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.105\nbsdf.inputs['Metallic'].default_value = 0.044\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: sphere, cone, plane, cylinder, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere and apply these modifiers: REMESH, SKIN, DECIMATE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.447114742166159, 1.7303620471684908, 2.345685942541901) over 108 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.45, 1.73, 2.35)\n    obj.keyframe_insert(data_path=\"location\", frame=108)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.276556946364884, -1.3206470693634556, 4.63188112135663) over 167 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.28, -1.32, 4.63)\n    obj.keyframe_insert(data_path=\"location\", frame=167)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.079, 0.088, 0.004, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.989\nbsdf.inputs['Metallic'].default_value = 0.574\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.666405334034955, -0.16768305987027432, 1.4477589170846261) over 132 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.67, -0.17, 1.45)\n    obj.keyframe_insert(data_path=\"location\", frame=132)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.512616401632688, -2.2308339252672837, 0.6554983831870004) over 222 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.51, -2.23, 0.66)\n    obj.keyframe_insert(data_path=\"location\", frame=222)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: sphere, cube, cylinder, cone, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -0.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 0.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.744, 0.562, 0.419, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.316\nbsdf.inputs['Metallic'].default_value = 0.546\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.126278600695144, -1.4294317831277246, 4.460291539253266) over 77 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.13, -1.43, 4.46)\n    obj.keyframe_insert(data_path=\"location\", frame=77)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.848550248045342, -4.104840752182043, 3.5146766415242885) over 175 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.85, -4.10, 3.51)\n    obj.keyframe_insert(data_path=\"location\", frame=175)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.283, 0.685, 0.719, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.711\nbsdf.inputs['Metallic'].default_value = 0.225\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane at location 4.4, 2.3, 0.4 with scale 1.3", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(4.45, 2.31, 0.44))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.29, 1.29, 1.29)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: MIRROR, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.9775953778649145, -2.6536058342826263, 2.7646904558134846) over 240 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.98, -2.65, 2.76)\n    obj.keyframe_insert(data_path=\"location\", frame=240)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.281906578722955, -2.008794807485107, 3.766936964267199) over 223 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.28, -2.01, 3.77)\n    obj.keyframe_insert(data_path=\"location\", frame=223)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location 1.6, 3.2, 1.9 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(1.57, 3.19, 1.89))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.43, 1.43, 1.43)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 5 objects: cylinder, cone, cube, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.071, 0.062, 0.225, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.776\nbsdf.inputs['Metallic'].default_value = 0.049\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.902, 0.555, 0.771, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.677\nbsdf.inputs['Metallic'].default_value = 0.656\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.710146363496643, 0.9260295362081052, 3.323320898523827) over 93 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.71, 0.93, 3.32)\n    obj.keyframe_insert(data_path=\"location\", frame=93)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: cube, cone, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.162722651527492, -0.2715058164234776, 2.494067928528656) over 138 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.16, -0.27, 2.49)\n    obj.keyframe_insert(data_path=\"location\", frame=138)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cube at location 0.9, 2.0, 1.8 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.89, 1.98, 1.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.76, 0.76, 0.76)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a plane and apply these modifiers: REMESH, LATTICE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cylinder, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.393, 0.690, 0.546, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.809\nbsdf.inputs['Metallic'].default_value = 0.847\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.110126173452867, -0.15158308201476345, 3.4538805007631446) over 125 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.11, -0.15, 3.45)\n    obj.keyframe_insert(data_path=\"location\", frame=125)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: cube, cylinder, cone, torus, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -0.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, 0.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.222116282707002, 4.444291981809137, 4.501290823637694) over 239 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.22, 4.44, 4.50)\n    obj.keyframe_insert(data_path=\"location\", frame=239)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: sphere, cone, plane, cylinder, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -0.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.911, 0.560, 0.971, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.961\nbsdf.inputs['Metallic'].default_value = 0.496\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.428702416311832, 0.7608764223970415, 3.068156444388344) over 157 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.43, 0.76, 3.07)\n    obj.keyframe_insert(data_path=\"location\", frame=157)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.010085572783769, -4.440587974060325, 0.4184934642656918) over 88 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.01, -4.44, 0.42)\n    obj.keyframe_insert(data_path=\"location\", frame=88)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.815, 0.664, 0.272, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.307\nbsdf.inputs['Metallic'].default_value = 0.048\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: cone, sphere, cylinder, plane, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 1.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.607, 0.466, 0.556, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.902\nbsdf.inputs['Metallic'].default_value = 0.449\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.369, 0.158, 0.582, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.940\nbsdf.inputs['Metallic'].default_value = 0.929\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.275883783807114, 4.523389144784174, 4.640582081072208) over 235 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.28, 4.52, 4.64)\n    obj.keyframe_insert(data_path=\"location\", frame=235)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: torus, plane, cylinder, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: torus, plane, cone, cube, cylinder, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 0.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -1.6, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.974, 0.948, 0.959, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.589\nbsdf.inputs['Metallic'].default_value = 0.997\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.954536868675794, -1.5463713166106876, 4.903118273650646) over 140 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.95, -1.55, 4.90)\n    obj.keyframe_insert(data_path=\"location\", frame=140)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane and apply these modifiers: BEVEL", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.157\nbevel_mod.segments = 4\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder and apply these modifiers: CURVE, SUBDIVISION_SURFACE, SKIN", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.360616371263108, -3.576428485790135, 4.522467127434632) over 85 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.36, -3.58, 4.52)\n    obj.keyframe_insert(data_path=\"location\", frame=85)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 6 objects: cube, torus, cylinder, cone, plane, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -1.7, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 4 objects: torus, sphere, plane, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.723636848324194, 1.71125642456591, 1.182859669577479) over 133 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.72, 1.71, 1.18)\n    obj.keyframe_insert(data_path=\"location\", frame=133)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.092, 0.294, 0.254, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.946\nbsdf.inputs['Metallic'].default_value = 0.874\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.343, 0.803, 0.492, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.557\nbsdf.inputs['Metallic'].default_value = 0.180\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone at location 3.3, -1.0, 1.0 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.27, -1.05, 0.99))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.17, 1.17, 1.17)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 4 objects: cube, sphere, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.301, 0.924, 0.843, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.461\nbsdf.inputs['Metallic'].default_value = 0.668\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: plane, cone, cube, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.851, 0.349, 0.631, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.657\nbsdf.inputs['Metallic'].default_value = 0.530\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.630, 0.352, 0.203, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.412\nbsdf.inputs['Metallic'].default_value = 0.923\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus at location 2.7, 2.0, 1.3 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.72, 2.00, 1.29))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.73, 0.73, 0.73)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone and apply these modifiers: DISPLACE, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location 4.3, 1.4, 1.2 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.32, 1.41, 1.23))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.63, 1.63, 1.63)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder and apply these modifiers: MIRROR, BOOLEAN, CURVE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a sphere at location 3.6, -1.2, 1.8 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.65, -1.20, 1.81))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.98, 0.98, 0.98)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cylinder at location 4.3, 0.5, 1.4 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.27, 0.47, 1.45))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.92, 1.92, 1.92)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.533637420870471, -4.588865102670374, 4.337587213231345) over 71 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.53, -4.59, 4.34)\n    obj.keyframe_insert(data_path=\"location\", frame=71)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.529865831596388, 0.3235732487308134, 4.056467577389048) over 239 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.53, 0.32, 4.06)\n    obj.keyframe_insert(data_path=\"location\", frame=239)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.870134354987776, 4.088112313894589, 3.2784441835802958) over 115 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.87, 4.09, 3.28)\n    obj.keyframe_insert(data_path=\"location\", frame=115)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.920848030444846, 0.9062496032041798, 0.8584193036780086) over 142 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.92, 0.91, 0.86)\n    obj.keyframe_insert(data_path=\"location\", frame=142)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location 0.6, -3.4, 2.9 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.57, -3.42, 2.91))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.54, 1.54, 1.54)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.502, 0.824, 0.081, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.345\nbsdf.inputs['Metallic'].default_value = 0.076\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: WIREFRAME", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.741216891743786, 4.937258972897149, 4.439805398543195) over 201 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.74, 4.94, 4.44)\n    obj.keyframe_insert(data_path=\"location\", frame=201)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.363, 0.243, 0.528, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.536\nbsdf.inputs['Metallic'].default_value = 0.192\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: SIMPLE_DEFORM, SUBDIVISION_SURFACE, CURVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 2\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cylinder, cube, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.196, 0.988, 0.306, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.586\nbsdf.inputs['Metallic'].default_value = 0.900\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus at location -0.8, 1.2, 2.5 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-0.84, 1.18, 2.54))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.71, 0.71, 0.71)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.149965003116073, 4.2068912847696165, 0.3732534861321424) over 137 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.15, 4.21, 0.37)\n    obj.keyframe_insert(data_path=\"location\", frame=137)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.208685038132005, -0.8921803562302832, 1.184948083763973) over 64 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.21, -0.89, 1.18)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.098, 0.526, 0.380, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.196\nbsdf.inputs['Metallic'].default_value = 0.643\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.07886265988439, 2.7261537760560888, 0.2604995390604764) over 224 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.08, 2.73, 0.26)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.7580933528625415, -1.814152425854283, 3.2816089800095987) over 198 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.76, -1.81, 3.28)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube and apply these modifiers: DISPLACE, BEVEL, MIRROR", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.022\nbevel_mod.segments = 5\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 3\narray_mod.relative_offset_displace = (1.5, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.159, 0.719, 0.939, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.715\nbsdf.inputs['Metallic'].default_value = 0.613\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.927, 0.383, 0.121, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.599\nbsdf.inputs['Metallic'].default_value = 0.069\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.541819999123987, -4.784710668907513, 4.651667879244636) over 77 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.54, -4.78, 4.65)\n    obj.keyframe_insert(data_path=\"location\", frame=77)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.703, 0.314, 0.596, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.786\nbsdf.inputs['Metallic'].default_value = 0.427\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 10\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -3.0, -2.1, 2.5 with scale 2.0", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.01, -2.06, 2.47))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.98, 1.98, 1.98)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: cone, cylinder, cube, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.703, 0.645, 0.990, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.755\nbsdf.inputs['Metallic'].default_value = 0.635\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: cylinder, plane, torus, sphere, cube, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, 1.6, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 4 objects: cube, cone, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.412996133544787, 2.1519337517035293, 1.251122157497035) over 166 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.41, 2.15, 1.25)\n    obj.keyframe_insert(data_path=\"location\", frame=166)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.870673386996508, 0.4769762810861842, 2.5894330614467025) over 231 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.87, 0.48, 2.59)\n    obj.keyframe_insert(data_path=\"location\", frame=231)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.834, 0.478, 0.358, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.416\nbsdf.inputs['Metallic'].default_value = 0.746\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder and apply these modifiers: BEVEL, LATTICE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.192\nbevel_mod.segments = 6\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 4 objects: cube, sphere, cone, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.391, 0.298, 0.061, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.853\nbsdf.inputs['Metallic'].default_value = 0.563\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus at location -5.0, 2.6, 0.1 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.97, 2.61, 0.12))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.68, 0.68, 0.68)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.756157818332082, 4.47207022931844, 1.0107522538840275) over 126 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.76, 4.47, 1.01)\n    obj.keyframe_insert(data_path=\"location\", frame=126)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.4274292315583335, -1.376396370169605, 1.1364300628971407) over 143 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.43, -1.38, 1.14)\n    obj.keyframe_insert(data_path=\"location\", frame=143)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder and apply these modifiers: CURVE, SKIN", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location 1.4, 4.1, 2.3 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(1.37, 4.11, 2.25))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.42, 1.42, 1.42)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: BEVEL", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.123\nbevel_mod.segments = 6\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.086, 0.024, 0.224, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.325\nbsdf.inputs['Metallic'].default_value = 0.700\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location -2.7, -4.9, 0.7 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.65, -4.92, 0.68))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.86, 1.86, 1.86)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.215548299830765, 1.4676356421950798, 4.018806620555369) over 238 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.22, 1.47, 4.02)\n    obj.keyframe_insert(data_path=\"location\", frame=238)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.217, 0.774, 0.256, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.513\nbsdf.inputs['Metallic'].default_value = 0.163\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.127, 0.939, 0.027, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.611\nbsdf.inputs['Metallic'].default_value = 0.732\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.127, 0.821, 0.578, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.162\nbsdf.inputs['Metallic'].default_value = 0.925\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.684, 0.032, 0.350, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.476\nbsdf.inputs['Metallic'].default_value = 0.410\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.149104672865946, -2.004015712801668, 0.1939793020943631) over 89 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.15, -2.00, 0.19)\n    obj.keyframe_insert(data_path=\"location\", frame=89)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: CURVE, BEVEL, DECIMATE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.187\nbevel_mod.segments = 6\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 4 objects: cylinder, sphere, cube, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.435333119113864, -2.989049568921761, 4.942296377385074) over 101 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.44, -2.99, 4.94)\n    obj.keyframe_insert(data_path=\"location\", frame=101)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.199170779484698, 0.03403792688796514, 2.1005424108783854) over 211 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.20, 0.03, 2.10)\n    obj.keyframe_insert(data_path=\"location\", frame=211)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.561, 0.610, 0.421, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.647\nbsdf.inputs['Metallic'].default_value = 0.525\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.133643491665623, -2.0989411824823376, 3.799558660242538) over 193 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.13, -2.10, 3.80)\n    obj.keyframe_insert(data_path=\"location\", frame=193)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone and apply these modifiers: ARRAY, REMESH, DECIMATE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.9, 0, 0)\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: torus, cone, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: BEVEL, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.110\nbevel_mod.segments = 5\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder and apply these modifiers: WAVE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube and apply these modifiers: LATTICE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus and apply these modifiers: LATTICE, MIRROR", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane at location -0.7, 3.0, 1.6 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-0.72, 2.96, 1.64))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.61, 1.61, 1.61)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.49804562477174, -1.2822914109311965, 2.6982129494851814) over 225 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.50, -1.28, 2.70)\n    obj.keyframe_insert(data_path=\"location\", frame=225)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: sphere, cone, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.811766713126193, -0.5370095061658189, 0.17591479573894786) over 117 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.81, -0.54, 0.18)\n    obj.keyframe_insert(data_path=\"location\", frame=117)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone and apply these modifiers: WIREFRAME, ARRAY, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.5, 0, 0)\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.304394084111047, -4.397553972670196, 4.1483274874405325) over 228 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.30, -4.40, 4.15)\n    obj.keyframe_insert(data_path=\"location\", frame=228)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.356, 0.434, 0.962, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.214\nbsdf.inputs['Metallic'].default_value = 0.700\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.773692275358112, -1.364046895900315, 2.6738877312265203) over 132 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.77, -1.36, 2.67)\n    obj.keyframe_insert(data_path=\"location\", frame=132)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone at location -4.6, 4.1, 1.7 with scale 0.9", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.61, 4.08, 1.74))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.90, 0.90, 0.90)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.168, 0.131, 0.163, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.631\nbsdf.inputs['Metallic'].default_value = 0.421\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: BEVEL, REMESH", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.019\nbevel_mod.segments = 4\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere at location -2.7, 1.7, 2.8 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.69, 1.70, 2.84))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.01, 1.01, 1.01)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.329, 0.657, 0.532, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.386\nbsdf.inputs['Metallic'].default_value = 0.233\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: torus, cube, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.220, 0.220, 0.931, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.949\nbsdf.inputs['Metallic'].default_value = 0.875\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: plane, cone, cylinder, torus, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 0.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone and apply these modifiers: REMESH, CURVE, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.472, 0.594, 0.995, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.614\nbsdf.inputs['Metallic'].default_value = 0.688\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.592, 0.007, 0.952, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.729\nbsdf.inputs['Metallic'].default_value = 0.251\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.338, 0.591, 0.452, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.988\nbsdf.inputs['Metallic'].default_value = 0.681\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.350988241038744, 0.4425938682397792, 1.4448590497035563) over 163 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.35, 0.44, 1.44)\n    obj.keyframe_insert(data_path=\"location\", frame=163)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.818, 0.498, 0.115, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.423\nbsdf.inputs['Metallic'].default_value = 0.906\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: REMESH", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: CURVE, REMESH, DECIMATE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: sphere, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: sphere, cylinder, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 6 objects: sphere, cylinder, cube, plane, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -2.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.528, 0.923, 0.586, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.954\nbsdf.inputs['Metallic'].default_value = 0.901\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.73638365770697, 0.20551805174356907, 0.028829223421361072) over 109 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.74, 0.21, 0.03)\n    obj.keyframe_insert(data_path=\"location\", frame=109)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.513244925786019, -0.5944952232375558, 0.9024608477486351) over 88 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.51, -0.59, 0.90)\n    obj.keyframe_insert(data_path=\"location\", frame=88)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.19754042153753, 0.3127290796871236, 0.44326871728895045) over 130 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.20, 0.31, 0.44)\n    obj.keyframe_insert(data_path=\"location\", frame=130)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.014, 0.494, 0.166, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.529\nbsdf.inputs['Metallic'].default_value = 0.377\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.5256626276812595, 4.679569284421433, 2.646307342885659) over 64 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.53, 4.68, 2.65)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: sphere, cylinder, plane, cone, torus, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -1.8, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere and apply these modifiers: MIRROR, DECIMATE, SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.415, 0.856, 0.055, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.794\nbsdf.inputs['Metallic'].default_value = 0.848\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.999, 0.735, 0.634, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.254\nbsdf.inputs['Metallic'].default_value = 0.077\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: BOOLEAN, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.529683035637879, 0.8370383820076386, 2.517805431634817) over 99 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.53, 0.84, 2.52)\n    obj.keyframe_insert(data_path=\"location\", frame=99)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.372824193077502, 3.521310418186273, 1.9368747092129301) over 203 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.37, 3.52, 1.94)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.498, 0.735, 0.896, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.492\nbsdf.inputs['Metallic'].default_value = 0.301\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.034664211254103, -1.2342459938559114, 1.2057648488284933) over 228 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.03, -1.23, 1.21)\n    obj.keyframe_insert(data_path=\"location\", frame=228)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.033376036606896, 2.249305840479825, 2.1496166958236613) over 202 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.03, 2.25, 2.15)\n    obj.keyframe_insert(data_path=\"location\", frame=202)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.43716629811398, -3.916784633617697, 2.71255553656652) over 203 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.44, -3.92, 2.71)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cube, plane, cone, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.673, 0.339, 0.919, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.302\nbsdf.inputs['Metallic'].default_value = 0.566\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cube, torus, cone, sphere, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.527294116522349, 3.473553576983573, 1.025197091336234) over 113 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.53, 3.47, 1.03)\n    obj.keyframe_insert(data_path=\"location\", frame=113)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a sphere and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.628, 0.688, 0.909, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.117\nbsdf.inputs['Metallic'].default_value = 0.841\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location 3.9, 3.8, 0.8 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.90, 3.75, 0.82))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.04, 1.04, 1.04)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.556, 0.087, 0.898, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.988\nbsdf.inputs['Metallic'].default_value = 0.942\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.491, 0.242, 0.716, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.100\nbsdf.inputs['Metallic'].default_value = 0.061\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: MIRROR", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder at location 4.6, 3.0, 0.0 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.62, 2.99, 0.03))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.01, 1.01, 1.01)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: WIREFRAME, DISPLACE, LATTICE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.800707433786579, 2.168177746268708, 3.1490317684711537) over 200 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.80, 2.17, 3.15)\n    obj.keyframe_insert(data_path=\"location\", frame=200)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cone, plane, cube, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: plane, cylinder, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 6 objects: cube, plane, torus, sphere, cylinder, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 2.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -0.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.703, 0.355, 0.885, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.555\nbsdf.inputs['Metallic'].default_value = 0.358\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.136825697680285, -3.3470339027087723, 0.37503758497263506) over 233 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.14, -3.35, 0.38)\n    obj.keyframe_insert(data_path=\"location\", frame=233)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.347834547627414, 0.5732482938335952, 1.2037955082942902) over 72 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.35, 0.57, 1.20)\n    obj.keyframe_insert(data_path=\"location\", frame=72)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.480, 0.450, 0.999, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.368\nbsdf.inputs['Metallic'].default_value = 0.139\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.404, 0.528, 0.290, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.040\nbsdf.inputs['Metallic'].default_value = 0.725\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.039, 0.614, 0.370, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.575\nbsdf.inputs['Metallic'].default_value = 0.184\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: WAVE, CURVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.560475416690203, 0.6258073969901377, 4.7609498265214425) over 92 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.56, 0.63, 4.76)\n    obj.keyframe_insert(data_path=\"location\", frame=92)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: MIRROR", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a sphere and apply these modifiers: SKIN, LATTICE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.912837953312712, 3.995413020621333, 0.4061807200191303) over 128 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.91, 4.00, 0.41)\n    obj.keyframe_insert(data_path=\"location\", frame=128)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.890, 0.794, 0.851, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.393\nbsdf.inputs['Metallic'].default_value = 0.673\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube and apply these modifiers: ARRAY, SOLIDIFY, SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 3\narray_mod.relative_offset_displace = (1.2, 0, 0)\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.027, 0.675, 0.081, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.986\nbsdf.inputs['Metallic'].default_value = 0.963\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -0.7, 1.6, 0.4 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-0.74, 1.63, 0.37))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.87, 1.87, 1.87)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cube at location -3.5, -1.2, 2.0 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-3.55, -1.17, 1.97))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.11, 1.11, 1.11)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location -1.4, -0.2, 0.8 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-1.44, -0.21, 0.84))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (0.52, 0.52, 0.52)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a plane and apply these modifiers: REMESH, CURVE, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.547573324367688, -1.3800295101275428, 3.5186850202890216) over 193 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.55, -1.38, 3.52)\n    obj.keyframe_insert(data_path=\"location\", frame=193)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.977309612617955, -2.1035837444151264, 1.2062144539297655) over 214 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.98, -2.10, 1.21)\n    obj.keyframe_insert(data_path=\"location\", frame=214)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: cube, torus, cone, plane, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone at location 2.3, 0.5, 1.2 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(2.26, 0.48, 1.25))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.74, 1.74, 1.74)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cube at location -1.3, -1.8, 1.0 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-1.32, -1.82, 1.01))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.39, 1.39, 1.39)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a green, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.688, 0.785, 0.315, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.209\nbsdf.inputs['Metallic'].default_value = 0.695\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.757, 0.642, 0.523, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.222\nbsdf.inputs['Metallic'].default_value = 0.048\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.800, 0.933, 0.480, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.953\nbsdf.inputs['Metallic'].default_value = 0.125\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.021590127265746, 0.4573007310914008, 4.805717497603891) over 203 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.02, 0.46, 4.81)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: plane, cube, sphere, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: cylinder, cube, torus, cone, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, 1.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.970, 0.023, 0.702, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.705\nbsdf.inputs['Metallic'].default_value = 0.782\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere at location -2.7, 1.4, 1.8 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.74, 1.42, 1.80))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.37, 1.37, 1.37)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone and apply these modifiers: DECIMATE, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.985410295984948, -1.811396648567969, 4.446776164147697) over 143 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.99, -1.81, 4.45)\n    obj.keyframe_insert(data_path=\"location\", frame=143)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.794, 0.004, 0.016, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.288\nbsdf.inputs['Metallic'].default_value = 0.997\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: cylinder, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.1335755215194965, 0.5866837018361242, 3.8009046838896237) over 136 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.13, 0.59, 3.80)\n    obj.keyframe_insert(data_path=\"location\", frame=136)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: BOOLEAN, SOLIDIFY, MIRROR", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.582501797481697, -4.62714140685007, 2.8197430076123076) over 223 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.58, -4.63, 2.82)\n    obj.keyframe_insert(data_path=\"location\", frame=223)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cube at location 0.2, -3.2, 0.2 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.20, -3.24, 0.18))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.51, 0.51, 0.51)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.195052336365048, 2.4220189487590025, 2.5330452721652397) over 168 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.20, 2.42, 2.53)\n    obj.keyframe_insert(data_path=\"location\", frame=168)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.678, 0.910, 0.202, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.839\nbsdf.inputs['Metallic'].default_value = 0.038\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location 1.5, -2.2, 2.5 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(1.45, -2.21, 2.45))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.74, 0.74, 0.74)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 3 objects: sphere, cylinder, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus at location 2.1, 2.7, 0.5 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.10, 2.72, 0.52))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.69, 0.69, 0.69)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.411797798288693, 0.9243419090716065, 2.0822584241940274) over 109 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.41, 0.92, 2.08)\n    obj.keyframe_insert(data_path=\"location\", frame=109)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.769, 0.817, 0.739, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.743\nbsdf.inputs['Metallic'].default_value = 0.535\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.5061991863730615, 1.8039841024677736, 3.7728098887155936) over 107 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.51, 1.80, 3.77)\n    obj.keyframe_insert(data_path=\"location\", frame=107)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.712, 0.516, 0.976, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.792\nbsdf.inputs['Metallic'].default_value = 0.492\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane at location -1.5, 2.9, 1.8 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.48, 2.91, 1.81))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.73, 0.73, 0.73)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.918175099635366, 2.44575188519362, 0.7246825247915439) over 170 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.92, 2.45, 0.72)\n    obj.keyframe_insert(data_path=\"location\", frame=170)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location 1.1, 0.1, 0.4 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.08, 0.08, 0.45))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.59, 0.59, 0.59)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 10\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: ARRAY, BEVEL, CURVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.7, 0, 0)\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.193\nbevel_mod.segments = 2\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.600274377341574, 0.35286056191352344, 1.2321326530838776) over 112 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.60, 0.35, 1.23)\n    obj.keyframe_insert(data_path=\"location\", frame=112)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.315359695056687, 0.6465070361649561, 4.515806707692575) over 174 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.32, 0.65, 4.52)\n    obj.keyframe_insert(data_path=\"location\", frame=174)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.172, 0.045, 0.805, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.111\nbsdf.inputs['Metallic'].default_value = 0.287\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cylinder, cube, torus, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: cone, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.328358095027053, 3.3608989145637036, 0.8315861044087519) over 191 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.33, 3.36, 0.83)\n    obj.keyframe_insert(data_path=\"location\", frame=191)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.47541567914835, -4.517318296773021, 4.230512188588879) over 145 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.48, -4.52, 4.23)\n    obj.keyframe_insert(data_path=\"location\", frame=145)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: plane, cone, torus, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 4 objects: cone, cube, cylinder, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.751, 0.091, 0.232, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.062\nbsdf.inputs['Metallic'].default_value = 0.204\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: plane, sphere, cone, cube, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, 0.8, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: cylinder, cone, cube, torus, plane, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -2.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.375, 0.168, 0.642, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.932\nbsdf.inputs['Metallic'].default_value = 0.337\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.825, 0.795, 0.046, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.630\nbsdf.inputs['Metallic'].default_value = 0.014\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus at location -4.2, -0.3, 0.9 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.15, -0.28, 0.86))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.16, 1.16, 1.16)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.75181176325479, 4.7962825982905155, 0.09909799593161905) over 81 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.75, 4.80, 0.10)\n    obj.keyframe_insert(data_path=\"location\", frame=81)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.726573405148873, -1.1761051572293155, 4.086577149199408) over 130 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.73, -1.18, 4.09)\n    obj.keyframe_insert(data_path=\"location\", frame=130)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.663, 0.215, 0.866, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.718\nbsdf.inputs['Metallic'].default_value = 0.040\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.71580074589379, 1.4280671228057882, 0.5275694083758131) over 103 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.72, 1.43, 0.53)\n    obj.keyframe_insert(data_path=\"location\", frame=103)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: cube, plane, sphere, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.926, 0.543, 0.512, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.324\nbsdf.inputs['Metallic'].default_value = 0.773\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: SKIN, MIRROR, SOLIDIFY", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.046671654899405, -0.16482278499277392, 3.4995729198763668) over 67 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.05, -0.16, 3.50)\n    obj.keyframe_insert(data_path=\"location\", frame=67)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.074517951226646, -4.187055744220741, 1.9837735984718878) over 230 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.07, -4.19, 1.98)\n    obj.keyframe_insert(data_path=\"location\", frame=230)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: plane, cone, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.365, 0.712, 0.320, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.417\nbsdf.inputs['Metallic'].default_value = 0.398\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.103, 0.773, 0.823, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.968\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.612, 0.194, 0.938, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.362\nbsdf.inputs['Metallic'].default_value = 0.147\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: cone, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.227, 0.245, 0.034, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.972\nbsdf.inputs['Metallic'].default_value = 0.758\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.188, 0.109, 0.815, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.988\nbsdf.inputs['Metallic'].default_value = 0.749\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.394, 0.854, 0.799, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.054\nbsdf.inputs['Metallic'].default_value = 0.952\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cylinder, torus, cone, cube, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -0.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.835, 0.766, 0.735, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.536\nbsdf.inputs['Metallic'].default_value = 0.642\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.172, 0.683, 0.748, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.978\nbsdf.inputs['Metallic'].default_value = 0.472\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.248, 0.244, 0.332, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.916\nbsdf.inputs['Metallic'].default_value = 0.437\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.575763686778894, -1.5580483856454452, 0.4371394844194515) over 155 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.58, -1.56, 0.44)\n    obj.keyframe_insert(data_path=\"location\", frame=155)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.648, 0.549, 0.908, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.058\nbsdf.inputs['Metallic'].default_value = 0.723\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder and apply these modifiers: DISPLACE, WAVE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 6 objects: cube, plane, cone, cylinder, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, -0.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location 4.7, -2.0, 1.1 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.67, -2.05, 1.14))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.74, 0.74, 0.74)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.659523945471431, 0.3018279082489599, 1.5800281454838316) over 223 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.66, 0.30, 1.58)\n    obj.keyframe_insert(data_path=\"location\", frame=223)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.169, 0.473, 0.082, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.956\nbsdf.inputs['Metallic'].default_value = 0.038\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: plane, cone, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location 2.8, -0.9, 0.4 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.81, -0.90, 0.36))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.62, 0.62, 0.62)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 6 objects: plane, cube, cone, torus, sphere, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, 1.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.419, 0.644, 0.775, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.582\nbsdf.inputs['Metallic'].default_value = 0.657\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: ARRAY, MIRROR", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 5\narray_mod.relative_offset_displace = (1.2, 0, 0)\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 6\narray_mod.relative_offset_displace = (1.3, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane at location 3.7, 1.8, 2.4 with scale 1.8", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.74, 1.79, 2.42))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.81, 1.81, 1.81)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: CURVE, DISPLACE, LATTICE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -0.4, -4.8, 3.0 with scale 0.9", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-0.43, -4.84, 2.95))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.92, 0.92, 0.92)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 4 objects: cone, cylinder, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: DISPLACE, DECIMATE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.280, 0.465, 0.989, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.358\nbsdf.inputs['Metallic'].default_value = 0.943\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder and apply these modifiers: CURVE, MIRROR, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.341, 0.529, 0.830, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.216\nbsdf.inputs['Metallic'].default_value = 0.554\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: WAVE, DECIMATE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone at location 4.1, -4.6, 0.1 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(4.11, -4.59, 0.12))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.13, 1.13, 1.13)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 6 objects: plane, cube, cone, cylinder, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -0.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -0.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone and apply these modifiers: WIREFRAME, ARRAY", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 8\narray_mod.relative_offset_displace = (1.4, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cube, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.892684073115322, -2.9856053989115505, 4.984242197171175) over 218 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.89, -2.99, 4.98)\n    obj.keyframe_insert(data_path=\"location\", frame=218)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.736809266116209, 1.87465166477066, 1.2911080636504069) over 218 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.74, 1.87, 1.29)\n    obj.keyframe_insert(data_path=\"location\", frame=218)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.909, 0.442, 0.228, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.665\nbsdf.inputs['Metallic'].default_value = 0.547\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.715, 0.438, 0.740, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.995\nbsdf.inputs['Metallic'].default_value = 0.867\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.184, 0.101, 0.793, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.665\nbsdf.inputs['Metallic'].default_value = 0.730\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.460818472734937, 1.124673152477726, 4.854311062499899) over 139 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.46, 1.12, 4.85)\n    obj.keyframe_insert(data_path=\"location\", frame=139)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.623, 0.748, 0.946, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.791\nbsdf.inputs['Metallic'].default_value = 0.412\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.754652967234371, 0.3942027082311652, 3.556249312682408) over 128 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.75, 0.39, 3.56)\n    obj.keyframe_insert(data_path=\"location\", frame=128)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone and apply these modifiers: DECIMATE, SKIN, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.549, 0.855, 0.895, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.685\nbsdf.inputs['Metallic'].default_value = 0.824\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.106, 0.975, 0.433, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.801\nbsdf.inputs['Metallic'].default_value = 0.249\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.879895412576187, -0.4282383372182661, 4.718132227620158) over 126 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.88, -0.43, 4.72)\n    obj.keyframe_insert(data_path=\"location\", frame=126)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: ARRAY, WAVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 10\narray_mod.relative_offset_displace = (2.0, 0, 0)\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.907, 0.010, 0.410, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.795\nbsdf.inputs['Metallic'].default_value = 0.973\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: BOOLEAN, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.222, 0.018, 0.117, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.777\nbsdf.inputs['Metallic'].default_value = 0.284\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: torus, cylinder, plane, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 0.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.292, 0.608, 0.547, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.372\nbsdf.inputs['Metallic'].default_value = 0.892\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: cone, cube, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 4 objects: cone, torus, cube, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.5, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.263, 0.878, 0.790, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.311\nbsdf.inputs['Metallic'].default_value = 0.850\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.374, 0.165, 0.615, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.092\nbsdf.inputs['Metallic'].default_value = 0.616\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere and apply these modifiers: WAVE, DISPLACE, MIRROR", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.498781498573982, -0.1621656553203259, 2.2009767918047887) over 148 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.50, -0.16, 2.20)\n    obj.keyframe_insert(data_path=\"location\", frame=148)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: DECIMATE, DISPLACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location 4.7, -4.3, 1.0 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.69, -4.28, 0.98))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.00, 1.00, 1.00)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.012454560864362, -0.13868623045349882, 4.2854763216111245) over 119 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.01, -0.14, 4.29)\n    obj.keyframe_insert(data_path=\"location\", frame=119)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: torus, cylinder, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.908, 0.832, 0.353, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.231\nbsdf.inputs['Metallic'].default_value = 0.626\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location 0.5, 3.3, 0.0 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.54, 3.34, 0.03))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.46, 1.46, 1.46)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 6 objects: sphere, torus, cube, plane, cone, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, 1.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.925159674364862, 3.803688482674257, 4.567838048926265) over 214 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.93, 3.80, 4.57)\n    obj.keyframe_insert(data_path=\"location\", frame=214)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.724009418307351, 4.143097845507684, 3.436533837016) over 148 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.72, 4.14, 3.44)\n    obj.keyframe_insert(data_path=\"location\", frame=148)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.589, 0.395, 0.921, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.472\nbsdf.inputs['Metallic'].default_value = 0.484\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.423, 0.748, 0.761, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.747\nbsdf.inputs['Metallic'].default_value = 0.050\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.877597099345206, -2.578428201834584, 2.181097700771576) over 121 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.88, -2.58, 2.18)\n    obj.keyframe_insert(data_path=\"location\", frame=121)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a sphere at location -1.4, -4.5, 0.3 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-1.42, -4.49, 0.28))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.58, 0.58, 0.58)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.354, 0.695, 0.542, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.256\nbsdf.inputs['Metallic'].default_value = 0.536\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere at location -3.9, -2.8, 0.8 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-3.95, -2.79, 0.76))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.53, 0.53, 0.53)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.663, 0.255, 0.152, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.470\nbsdf.inputs['Metallic'].default_value = 0.206\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: SOLIDIFY, DECIMATE, BEVEL", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.158\nbevel_mod.segments = 6\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cube, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.418, 0.776, 0.355, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.788\nbsdf.inputs['Metallic'].default_value = 0.681\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.908, 0.750, 0.793, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.807\nbsdf.inputs['Metallic'].default_value = 0.452\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.49927095913882, -3.9647847212326504, 1.0419226729771502) over 82 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.50, -3.96, 1.04)\n    obj.keyframe_insert(data_path=\"location\", frame=82)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cube, sphere, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.874, 0.846, 0.072, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.773\nbsdf.inputs['Metallic'].default_value = 0.784\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location 2.6, -1.8, 0.5 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(2.59, -1.83, 0.52))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.55, 0.55, 0.55)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.571073337249051, -0.5897463995961623, 1.695034350831191) over 198 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.57, -0.59, 1.70)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cube, cylinder, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.298, 0.909, 1.000, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.453\nbsdf.inputs['Metallic'].default_value = 0.136\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cone, sphere, cylinder, plane, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 0.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.201, 0.147, 0.222, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.534\nbsdf.inputs['Metallic'].default_value = 0.389\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane at location -4.9, 4.4, 1.1 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-4.93, 4.41, 1.09))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.05, 1.05, 1.05)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.64643705633368, -3.1000715221980766, 3.7740668439935314) over 152 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.65, -3.10, 3.77)\n    obj.keyframe_insert(data_path=\"location\", frame=152)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.639209516822297, -2.820857655354334, 4.774122974984168) over 146 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.64, -2.82, 4.77)\n    obj.keyframe_insert(data_path=\"location\", frame=146)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.648214387769387, 3.7244486099568057, 0.7062580316643313) over 121 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.65, 3.72, 0.71)\n    obj.keyframe_insert(data_path=\"location\", frame=121)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: torus, cylinder, cube, cone, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, 1.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: sphere, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.371, 0.944, 0.791, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.556\nbsdf.inputs['Metallic'].default_value = 0.461\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.399, 0.266, 0.259, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.150\nbsdf.inputs['Metallic'].default_value = 0.156\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: torus, cube, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: plane, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.531129238386034, 1.5008640913030735, 1.388925418735304) over 80 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.53, 1.50, 1.39)\n    obj.keyframe_insert(data_path=\"location\", frame=80)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.658809178625645, -0.5063595493257473, 2.1918987637055585) over 198 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.66, -0.51, 2.19)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane and apply these modifiers: SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: plane, cube, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.353, 0.020, 0.935, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.461\nbsdf.inputs['Metallic'].default_value = 0.839\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere and apply these modifiers: SIMPLE_DEFORM, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 3\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.196, 0.973, 0.225, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.594\nbsdf.inputs['Metallic'].default_value = 0.935\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: cone, cylinder, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.08180005247117, -1.7424933472990087, 1.1554111278446482) over 193 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.08, -1.74, 1.16)\n    obj.keyframe_insert(data_path=\"location\", frame=193)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus at location 0.3, -2.9, 0.8 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.28, -2.95, 0.77))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.54, 0.54, 0.54)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.619, 0.408, 0.062, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.558\nbsdf.inputs['Metallic'].default_value = 0.626\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location -1.1, 0.6, 0.8 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-1.13, 0.55, 0.79))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.19, 1.19, 1.19)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.989646351068376, -0.7274577110005662, 2.114738952113031) over 230 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.99, -0.73, 2.11)\n    obj.keyframe_insert(data_path=\"location\", frame=230)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.923, 0.191, 0.288, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.242\nbsdf.inputs['Metallic'].default_value = 0.625\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: torus, cone, cylinder, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location 4.7, 2.1, 0.1 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.70, 2.08, 0.12))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.83, 0.83, 0.83)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.014257418364721, -1.0786536968700133, 0.8740328353112309) over 215 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.01, -1.08, 0.87)\n    obj.keyframe_insert(data_path=\"location\", frame=215)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.92153928106069, 4.078708650321076, 0.1205804670395294) over 224 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.92, 4.08, 0.12)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: plane, cone, cube, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere at location -2.9, -1.9, 2.6 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.95, -1.89, 2.61))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.46, 1.46, 1.46)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.862, 0.621, 0.242, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.501\nbsdf.inputs['Metallic'].default_value = 0.961\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.151, 0.149, 0.987, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.086\nbsdf.inputs['Metallic'].default_value = 0.306\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 4 objects: torus, plane, cylinder, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: BEVEL", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.045\nbevel_mod.segments = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube at location 3.5, 3.6, 0.5 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.47, 3.61, 0.50))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.70, 0.70, 0.70)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cylinder and apply these modifiers: REMESH", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.228172651023073, -3.626567350926261, 4.00790981806509) over 160 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.23, -3.63, 4.01)\n    obj.keyframe_insert(data_path=\"location\", frame=160)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere and apply these modifiers: BEVEL, SIMPLE_DEFORM, SKIN", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.144\nbevel_mod.segments = 4\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: cube, plane, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: plane, cylinder, cube, sphere, cone, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 1.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: sphere, torus, plane, cylinder, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere at location -0.9, 2.7, 2.3 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-0.87, 2.68, 2.28))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.65, 1.65, 1.65)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.783109136733616, -3.2782224144214176, 1.6788597964334158) over 214 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.78, -3.28, 1.68)\n    obj.keyframe_insert(data_path=\"location\", frame=214)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: SIMPLE_DEFORM, ARRAY, CURVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 5\narray_mod.relative_offset_displace = (1.3, 0, 0)\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cone, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a plane and apply these modifiers: BEVEL, DECIMATE, MIRROR", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.050\nbevel_mod.segments = 5\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.380, 0.115, 0.371, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.370\nbsdf.inputs['Metallic'].default_value = 0.371\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: WAVE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: cylinder, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.941, 0.165, 0.314, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.397\nbsdf.inputs['Metallic'].default_value = 0.278\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.537, 0.796, 0.999, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.372\nbsdf.inputs['Metallic'].default_value = 0.665\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder at location 4.5, 3.4, 2.2 with scale 2.0", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.53, 3.39, 2.25))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.95, 1.95, 1.95)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.259, 0.694, 0.028, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.546\nbsdf.inputs['Metallic'].default_value = 0.483\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: DECIMATE, CURVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube and apply these modifiers: BEVEL", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.023\nbevel_mod.segments = 6\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: torus, cube, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: cylinder, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.780, 0.085, 0.613, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.679\nbsdf.inputs['Metallic'].default_value = 0.109\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: LATTICE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube at location 3.2, -5.0, 2.5 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.20, -4.96, 2.49))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.76, 0.76, 0.76)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.516, 0.183, 0.500, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.078\nbsdf.inputs['Metallic'].default_value = 0.750\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.760, 0.488, 0.262, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.694\nbsdf.inputs['Metallic'].default_value = 0.342\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.603, 0.383, 0.565, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.608\nbsdf.inputs['Metallic'].default_value = 0.433\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.320, 0.841, 0.535, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.013\nbsdf.inputs['Metallic'].default_value = 0.308\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: WIREFRAME, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.511, 0.773, 0.560, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.248\nbsdf.inputs['Metallic'].default_value = 0.021\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.200, 0.987, 0.185, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.683\nbsdf.inputs['Metallic'].default_value = 0.315\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.869, 0.299, 0.978, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.552\nbsdf.inputs['Metallic'].default_value = 0.453\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder and apply these modifiers: DECIMATE, WAVE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location 1.7, -1.7, 2.0 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(1.65, -1.69, 1.99))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.43, 1.43, 1.43)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.895551895462434, 0.3193950599834352, 4.992694283780129) over 212 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.90, 0.32, 4.99)\n    obj.keyframe_insert(data_path=\"location\", frame=212)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.520, 0.007, 0.377, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.659\nbsdf.inputs['Metallic'].default_value = 0.032\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.39661515225157, -4.662361025735617, 0.1878567470785103) over 70 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.40, -4.66, 0.19)\n    obj.keyframe_insert(data_path=\"location\", frame=70)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere and apply these modifiers: WIREFRAME, BOOLEAN, MIRROR", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.4971484968096815, 4.622399449914511, 2.127521193020983) over 93 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.50, 4.62, 2.13)\n    obj.keyframe_insert(data_path=\"location\", frame=93)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube at location 4.1, -3.6, 3.0 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.08, -3.56, 2.97))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.10, 1.10, 1.10)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.635114583912745, -1.3686567269923602, 0.9365104153981912) over 104 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.64, -1.37, 0.94)\n    obj.keyframe_insert(data_path=\"location\", frame=104)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: plane, sphere, cube, cylinder, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone at location -3.7, -5.0, 2.9 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.67, -4.97, 2.93))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.41, 1.41, 1.41)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere at location -0.5, 0.4, 2.8 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-0.51, 0.41, 2.76))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.49, 1.49, 1.49)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 5 objects: plane, cone, cylinder, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -0.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: torus, cone, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: sphere, torus, cylinder, cube, plane, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -1.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: sphere, cone, cube, cylinder, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, 0.6, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a plane at location -1.6, -0.4, 0.9 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.63, -0.42, 0.93))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.05, 1.05, 1.05)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.8762668473830715, 3.3592271970814434, 1.9012698625300628) over 148 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.88, 3.36, 1.90)\n    obj.keyframe_insert(data_path=\"location\", frame=148)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.64437263716503, -0.35748528350596054, 2.130881617042664) over 63 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.64, -0.36, 2.13)\n    obj.keyframe_insert(data_path=\"location\", frame=63)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 5 objects: cylinder, cone, torus, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location -1.6, 3.4, 0.5 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-1.61, 3.37, 0.46))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.65, 1.65, 1.65)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cylinder at location -3.3, -0.8, 2.4 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-3.30, -0.82, 2.38))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (0.82, 0.82, 0.82)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location 3.4, 1.1, 0.8 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.42, 1.06, 0.83))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.51, 0.51, 0.51)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cube at location 1.6, -2.0, 2.3 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(1.60, -1.98, 2.30))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.74, 0.74, 0.74)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere and apply these modifiers: MIRROR, DISPLACE, BEVEL", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.122\nbevel_mod.segments = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 6 objects: sphere, torus, cone, cube, plane, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 0.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, 0.8, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 4 objects: cone, torus, sphere, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -3.5, 0.5, 2.9 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.49, 0.48, 2.92))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.70, 0.70, 0.70)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere at location 3.3, 3.3, 2.2 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.33, 3.25, 2.16))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.24, 1.24, 1.24)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cone at location -2.2, 4.4, 2.9 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-2.16, 4.42, 2.87))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.66, 0.66, 0.66)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.356426940010028, -0.3849630476257655, 4.407644753646233) over 128 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.36, -0.38, 4.41)\n    obj.keyframe_insert(data_path=\"location\", frame=128)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.733634349630861, -3.3281967485671915, 4.4376874644398345) over 213 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.73, -3.33, 4.44)\n    obj.keyframe_insert(data_path=\"location\", frame=213)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cube, sphere, plane, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: SOLIDIFY, WAVE, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.140687838401963, -0.6789797444602819, 1.3528937930870244) over 140 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.14, -0.68, 1.35)\n    obj.keyframe_insert(data_path=\"location\", frame=140)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: cone, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.970, 0.290, 0.626, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.339\nbsdf.inputs['Metallic'].default_value = 0.513\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: DISPLACE, WAVE, LATTICE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: WAVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location 2.7, -4.5, 1.8 with scale 1.8", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.67, -4.50, 1.84))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.81, 1.81, 1.81)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.130183686168424, -4.661317233619309, 2.0409805011674713) over 203 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.13, -4.66, 2.04)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: cylinder, plane, cone, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 5 objects: cylinder, cube, plane, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -0.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere and apply these modifiers: BOOLEAN, SKIN", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane at location 3.0, -1.0, 0.7 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.04, -0.96, 0.68))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.40, 1.40, 1.40)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a plane and apply these modifiers: MIRROR, DECIMATE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.069560997839815, 0.5437566306102841, 2.0718302771193815) over 152 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.07, 0.54, 2.07)\n    obj.keyframe_insert(data_path=\"location\", frame=152)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.912, 0.502, 0.821, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.072\nbsdf.inputs['Metallic'].default_value = 0.017\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: cylinder, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus at location -4.2, -1.4, 0.8 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.17, -1.36, 0.80))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.54, 1.54, 1.54)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.474153831125685, 4.3022230192383795, 4.331199817726574) over 133 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.47, 4.30, 4.33)\n    obj.keyframe_insert(data_path=\"location\", frame=133)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.253, 0.049, 0.882, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.690\nbsdf.inputs['Metallic'].default_value = 0.310\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: WAVE, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube and apply these modifiers: ARRAY, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 10\narray_mod.relative_offset_displace = (1.8, 0, 0)\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.908726140761422, -4.306304530018533, 4.965945000273661) over 151 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.91, -4.31, 4.97)\n    obj.keyframe_insert(data_path=\"location\", frame=151)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.742851812428782, 4.209985220354133, 4.957526285183748) over 213 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.74, 4.21, 4.96)\n    obj.keyframe_insert(data_path=\"location\", frame=213)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.017, 0.227, 0.438, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.923\nbsdf.inputs['Metallic'].default_value = 0.659\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.049718871938208, -2.003858140486132, 0.7209596499096593) over 70 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.05, -2.00, 0.72)\n    obj.keyframe_insert(data_path=\"location\", frame=70)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube and apply these modifiers: ARRAY, SKIN, SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 3\narray_mod.relative_offset_displace = (1.7, 0, 0)\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.408, 0.392, 0.342, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.977\nbsdf.inputs['Metallic'].default_value = 0.635\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: cylinder, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone and apply these modifiers: LATTICE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder at location 0.3, -2.4, 1.8 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.28, -2.44, 1.82))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.18, 1.18, 1.18)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.400, 0.623, 0.594, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.014\nbsdf.inputs['Metallic'].default_value = 0.568\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: WAVE, SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube at location 4.0, 3.3, 0.3 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.03, 3.33, 0.33))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.80, 0.80, 0.80)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.265, 0.110, 0.116, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.676\nbsdf.inputs['Metallic'].default_value = 0.766\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.253266963975527, -0.3317883840892568, 4.311657070593392) over 167 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.25, -0.33, 4.31)\n    obj.keyframe_insert(data_path=\"location\", frame=167)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a sphere and apply these modifiers: DISPLACE, REMESH, SOLIDIFY", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a sphere at location 4.0, -2.9, 1.3 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(4.01, -2.87, 1.31))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.65, 1.65, 1.65)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a torus and apply these modifiers: CURVE, WAVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 4 objects: cone, plane, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.082, 0.913, 0.677, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.918\nbsdf.inputs['Metallic'].default_value = 0.504\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: cylinder, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.404, 0.349, 0.619, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.064\nbsdf.inputs['Metallic'].default_value = 0.476\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.232, 0.078, 0.964, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.003\nbsdf.inputs['Metallic'].default_value = 0.284\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.0867360728734505, 4.589084650170509, 2.836936359595976) over 78 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.09, 4.59, 2.84)\n    obj.keyframe_insert(data_path=\"location\", frame=78)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.361598736528716, 3.3365873949644413, 1.149711522595469) over 127 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.36, 3.34, 1.15)\n    obj.keyframe_insert(data_path=\"location\", frame=127)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.812, 0.605, 0.503, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.490\nbsdf.inputs['Metallic'].default_value = 0.823\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: cylinder, sphere, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 3 objects: plane, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a plane and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.950190296691773, 3.747733610010071, 4.356281633527353) over 137 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.95, 3.75, 4.36)\n    obj.keyframe_insert(data_path=\"location\", frame=137)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone and apply these modifiers: REMESH, ARRAY", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.7, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.481, 0.618, 0.398, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.471\nbsdf.inputs['Metallic'].default_value = 0.565\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.471289655925595, 1.2020670333162107, 2.4677884156572953) over 163 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.47, 1.20, 2.47)\n    obj.keyframe_insert(data_path=\"location\", frame=163)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.627, 0.360, 0.353, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.416\nbsdf.inputs['Metallic'].default_value = 0.743\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: WAVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.906671012934313, -4.63592010611261, 0.19493387952782104) over 98 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.91, -4.64, 0.19)\n    obj.keyframe_insert(data_path=\"location\", frame=98)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.217, 0.263, 0.629, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.152\nbsdf.inputs['Metallic'].default_value = 0.861\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.441, 0.411, 0.842, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.890\nbsdf.inputs['Metallic'].default_value = 0.587\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: cone, torus, plane, sphere, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: SOLIDIFY, WAVE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.509, 0.113, 0.085, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.197\nbsdf.inputs['Metallic'].default_value = 0.545\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.890, 0.138, 0.577, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.853\nbsdf.inputs['Metallic'].default_value = 0.774\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: CURVE, REMESH", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.178, 0.314, 0.593, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.883\nbsdf.inputs['Metallic'].default_value = 0.960\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.844643682417422, 1.0040705370358367, 4.898771981711664) over 217 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.84, 1.00, 4.90)\n    obj.keyframe_insert(data_path=\"location\", frame=217)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane and apply these modifiers: BOOLEAN, WAVE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.307, 0.516, 0.846, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.890\nbsdf.inputs['Metallic'].default_value = 0.197\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.820, 0.304, 0.747, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.844\nbsdf.inputs['Metallic'].default_value = 0.622\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.816, 0.141, 0.183, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.699\nbsdf.inputs['Metallic'].default_value = 0.745\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.806, 0.060, 0.486, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.085\nbsdf.inputs['Metallic'].default_value = 0.827\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.182580193015472, 1.8382356727340934, 1.0581223462442335) over 122 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.18, 1.84, 1.06)\n    obj.keyframe_insert(data_path=\"location\", frame=122)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder at location 2.1, -2.1, 1.8 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(2.06, -2.14, 1.77))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.07, 1.07, 1.07)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 5 objects: torus, cube, plane, cone, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.680226595886484, -1.236869872085029, 0.4622485214211086) over 137 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.68, -1.24, 0.46)\n    obj.keyframe_insert(data_path=\"location\", frame=137)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: plane, cylinder, cube, cone, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, 0.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 5 objects: plane, cube, sphere, cone, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.003368086786638, -4.341895414891189, 0.5017189568764857) over 96 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.00, -4.34, 0.50)\n    obj.keyframe_insert(data_path=\"location\", frame=96)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a sphere at location 4.3, -4.0, 0.3 with scale 1.3", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(4.28, -4.02, 0.26))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.26, 1.26, 1.26)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone and apply these modifiers: DECIMATE, SIMPLE_DEFORM, CURVE", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.776, 0.689, 0.367, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.511\nbsdf.inputs['Metallic'].default_value = 0.025\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.047672368168202, 0.39795959856951235, 3.3967264117999663) over 180 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.05, 0.40, 3.40)\n    obj.keyframe_insert(data_path=\"location\", frame=180)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.338874188645214, 0.8424390458859126, 0.8253951821958588) over 123 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.34, 0.84, 0.83)\n    obj.keyframe_insert(data_path=\"location\", frame=123)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder at location 2.1, -3.4, 2.8 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(2.12, -3.41, 2.80))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.66, 1.66, 1.66)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.456156796389955, -1.5928397451778888, 0.6421156900523611) over 78 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.46, -1.59, 0.64)\n    obj.keyframe_insert(data_path=\"location\", frame=78)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.1836000695773246, -1.1866275862001086, 3.7665305470606922) over 200 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.18, -1.19, 3.77)\n    obj.keyframe_insert(data_path=\"location\", frame=200)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.888, 0.514, 0.270, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.502\nbsdf.inputs['Metallic'].default_value = 0.204\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.473, 0.976, 0.714, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.079\nbsdf.inputs['Metallic'].default_value = 0.623\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location -2.0, 3.9, 0.2 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-1.96, 3.93, 0.21))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.15, 1.15, 1.15)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.740216293063023, 0.24936708408145591, 4.986193656065855) over 124 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.74, 0.25, 4.99)\n    obj.keyframe_insert(data_path=\"location\", frame=124)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.990970490742158, -1.3895235939524686, 3.379325223642049) over 210 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.99, -1.39, 3.38)\n    obj.keyframe_insert(data_path=\"location\", frame=210)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: REMESH", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.743, 0.319, 0.388, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.077\nbsdf.inputs['Metallic'].default_value = 0.667\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -4.6, 0.7, 1.7 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.61, 0.74, 1.69))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.72, 1.72, 1.72)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.462, 0.560, 0.901, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.877\nbsdf.inputs['Metallic'].default_value = 0.457\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: DECIMATE, MIRROR", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.951030959932398, -4.791248850247779, 3.662583833196142) over 219 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.95, -4.79, 3.66)\n    obj.keyframe_insert(data_path=\"location\", frame=219)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.027, 0.776, 0.201, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.436\nbsdf.inputs['Metallic'].default_value = 0.232\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.985, 0.635, 0.636, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.875\nbsdf.inputs['Metallic'].default_value = 0.828\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.882516212310998, 4.859527442597777, 0.884056257712994) over 227 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.88, 4.86, 0.88)\n    obj.keyframe_insert(data_path=\"location\", frame=227)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.028875260778905, -3.892459949588095, 4.107810938115513) over 135 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.03, -3.89, 4.11)\n    obj.keyframe_insert(data_path=\"location\", frame=135)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 5 objects: plane, cone, cube, sphere, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.135558387133731, 3.2809174068612528, 0.2873639491896768) over 196 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.14, 3.28, 0.29)\n    obj.keyframe_insert(data_path=\"location\", frame=196)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.843, 0.203, 0.978, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.921\nbsdf.inputs['Metallic'].default_value = 0.437\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus and apply these modifiers: CURVE, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: plane, cube, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.692319275982598, 0.38603527504860313, 2.669134151413288) over 230 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.69, 0.39, 2.67)\n    obj.keyframe_insert(data_path=\"location\", frame=230)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.456, 0.183, 0.663, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.264\nbsdf.inputs['Metallic'].default_value = 0.379\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane at location -1.2, 0.2, 1.4 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.21, 0.16, 1.44))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.81, 0.81, 0.81)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a green, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.472, 0.962, 0.556, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.047\nbsdf.inputs['Metallic'].default_value = 0.488\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.7056084887804435, -1.2921446472514542, 4.563771630006612) over 65 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.71, -1.29, 4.56)\n    obj.keyframe_insert(data_path=\"location\", frame=65)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.316, 0.681, 0.637, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.946\nbsdf.inputs['Metallic'].default_value = 0.906\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: REMESH", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.598, 0.035, 0.308, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.746\nbsdf.inputs['Metallic'].default_value = 0.389\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.858, 0.786, 0.271, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.932\nbsdf.inputs['Metallic'].default_value = 0.899\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere and apply these modifiers: CURVE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a red, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.812, 0.844, 0.744, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.432\nbsdf.inputs['Metallic'].default_value = 0.830\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder at location -4.9, -4.4, 2.4 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-4.91, -4.39, 2.36))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.69, 1.69, 1.69)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.675, 0.064, 0.122, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.300\nbsdf.inputs['Metallic'].default_value = 0.079\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.273, 0.563, 0.804, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.375\nbsdf.inputs['Metallic'].default_value = 0.167\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.907, 0.615, 0.748, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.125\nbsdf.inputs['Metallic'].default_value = 0.053\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: plane, cone, torus, cylinder, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder at location -1.1, -2.5, 0.9 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-1.12, -2.53, 0.92))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.06, 1.06, 1.06)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.841, 0.167, 0.720, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.514\nbsdf.inputs['Metallic'].default_value = 0.953\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.406951146515708, 2.745449845461404, 1.5586460310922268) over 184 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.41, 2.75, 1.56)\n    obj.keyframe_insert(data_path=\"location\", frame=184)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.119, 0.582, 0.088, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.840\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: cube, cylinder, plane, sphere, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -0.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -0.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location -2.2, -4.0, 1.3 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-2.17, -3.99, 1.30))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.71, 0.71, 0.71)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 3 objects: plane, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.272, 0.670, 0.581, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.217\nbsdf.inputs['Metallic'].default_value = 0.629\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cube and apply these modifiers: LATTICE, WIREFRAME", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 5 objects: torus, plane, sphere, cylinder, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cone at location -4.0, -1.5, 2.8 with scale 1.4", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.01, -1.48, 2.79))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.42, 1.42, 1.42)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cylinder at location 4.6, -4.6, 2.2 with scale 0.5", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.62, -4.61, 2.20))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (0.51, 0.51, 0.51)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.899806577650292, -4.1050991432112305, 3.7831653864237937) over 113 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.90, -4.11, 3.78)\n    obj.keyframe_insert(data_path=\"location\", frame=113)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: cylinder, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone at location -4.1, -2.3, 1.2 with scale 1.5", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.07, -2.26, 1.18))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.46, 1.46, 1.46)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.209293774816462, -2.777136229110937, 1.644412095925099) over 160 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.21, -2.78, 1.64)\n    obj.keyframe_insert(data_path=\"location\", frame=160)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder and apply these modifiers: DISPLACE, MIRROR, SKIN", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.496309381078376, 1.2868825801919703, 2.864998628072255) over 211 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.50, 1.29, 2.86)\n    obj.keyframe_insert(data_path=\"location\", frame=211)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder and apply these modifiers: ARRAY", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.8, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.353644459097035, -2.6750975868923854, 0.20592517716341074) over 134 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.35, -2.68, 0.21)\n    obj.keyframe_insert(data_path=\"location\", frame=134)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.680295086863428, -4.196396861192011, 3.800096959834706) over 123 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.68, -4.20, 3.80)\n    obj.keyframe_insert(data_path=\"location\", frame=123)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.361, 0.650, 0.334, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.626\nbsdf.inputs['Metallic'].default_value = 0.212\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: cylinder, plane, sphere, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 4\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.761455190137365, 3.268200583559942, 4.685311519578336) over 128 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.76, 3.27, 4.69)\n    obj.keyframe_insert(data_path=\"location\", frame=128)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.441919270788423, -1.25695429868522, 1.2053990942232273) over 125 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.44, -1.26, 1.21)\n    obj.keyframe_insert(data_path=\"location\", frame=125)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.167, 0.763, 0.056, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.821\nbsdf.inputs['Metallic'].default_value = 0.576\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a sphere at location 3.1, 4.0, 2.6 with scale 0.6", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.05, 4.01, 2.63))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.59, 0.59, 0.59)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere at location 4.0, -0.5, 0.3 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(4.01, -0.48, 0.27))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.68, 1.68, 1.68)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.751, 0.533, 0.412, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.249\nbsdf.inputs['Metallic'].default_value = 0.061\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.474961953595018, -4.36280772735759, 1.5140186028316538) over 202 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.47, -4.36, 1.51)\n    obj.keyframe_insert(data_path=\"location\", frame=202)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.146, 0.063, 0.918, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.322\nbsdf.inputs['Metallic'].default_value = 0.736\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder at location -4.4, -3.9, 1.8 with scale 1.2", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-4.37, -3.86, 1.84))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.19, 1.19, 1.19)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 3 objects: cylinder, cone, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.319550979449299, 1.2008742937075878, 2.630630447192929) over 90 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.32, 1.20, 2.63)\n    obj.keyframe_insert(data_path=\"location\", frame=90)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.794847609520479, 0.21454983455601706, 1.6417181937252172) over 114 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.79, 0.21, 1.64)\n    obj.keyframe_insert(data_path=\"location\", frame=114)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 4 objects: cube, sphere, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: MIRROR", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 3 objects: plane, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cone and apply these modifiers: SOLIDIFY, BEVEL, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.172\nbevel_mod.segments = 2\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane at location -3.1, -1.6, 2.6 with scale 0.8", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-3.13, -1.64, 2.64))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.79, 0.79, 0.79)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a cube at location -2.5, -4.6, 0.3 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-2.52, -4.59, 0.26))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.69, 1.69, 1.69)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 3 objects: plane, torus, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.599, 0.503, 0.582, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.544\nbsdf.inputs['Metallic'].default_value = 0.557\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: torus, sphere, cylinder, cone, plane, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -0.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: BEVEL, BOOLEAN, LATTICE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.019\nbevel_mod.segments = 2\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.096, 0.495, 0.027, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.101\nbsdf.inputs['Metallic'].default_value = 0.507\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.641, 0.931, 0.889, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.460\nbsdf.inputs['Metallic'].default_value = 0.738\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.131, 0.013, 0.725, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.374\nbsdf.inputs['Metallic'].default_value = 0.708\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: DISPLACE, WAVE, ARRAY", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.9, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: WAVE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: torus, cone, plane, cube, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.037, 0.682, 0.627, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.383\nbsdf.inputs['Metallic'].default_value = 0.047\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a plane and apply these modifiers: DECIMATE, SUBDIVISION_SURFACE, LATTICE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 3\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cube at location -2.1, 1.4, 2.9 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-2.14, 1.41, 2.95))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.06, 1.06, 1.06)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cube at location 0.4, -4.8, 0.2 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.40, -4.79, 0.17))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.71, 0.71, 0.71)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.213, 0.274, 0.115, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.718\nbsdf.inputs['Metallic'].default_value = 0.297\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.557, 0.773, 0.798, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.132\nbsdf.inputs['Metallic'].default_value = 0.002\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.659777742692168, -3.897472500289454, 4.805544972178084) over 94 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.66, -3.90, 4.81)\n    obj.keyframe_insert(data_path=\"location\", frame=94)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.726663300146986, -2.5244417207745604, 4.356844682585496) over 139 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.73, -2.52, 4.36)\n    obj.keyframe_insert(data_path=\"location\", frame=139)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cylinder at location 4.6, 2.7, 0.6 with scale 1.1", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.57, 2.69, 0.61))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.14, 1.14, 1.14)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.280706600713452, -2.637763946004106, 1.203554791541626) over 236 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.28, -2.64, 1.20)\n    obj.keyframe_insert(data_path=\"location\", frame=236)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 3 objects: cube, cylinder, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a blue, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.254, 0.128, 0.754, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.586\nbsdf.inputs['Metallic'].default_value = 0.609\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 6 objects: cylinder, plane, cube, torus, sphere, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 2.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, 2.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.462633492433572, -4.685721525857112, 0.5648696281949694) over 86 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.46, -4.69, 0.56)\n    obj.keyframe_insert(data_path=\"location\", frame=86)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a green, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.320, 0.725, 0.448, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.972\nbsdf.inputs['Metallic'].default_value = 0.420\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 5 objects: sphere, plane, torus, cone, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cube at location 1.6, -3.6, 0.9 with scale 1.9", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(1.57, -3.61, 0.85))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.89, 1.89, 1.89)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.299365796494513, 3.93537643069927, 2.5550560275344565) over 177 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.30, 3.94, 2.56)\n    obj.keyframe_insert(data_path=\"location\", frame=177)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.244, 0.159, 0.660, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.635\nbsdf.inputs['Metallic'].default_value = 0.435\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane at location -4.7, -0.4, 2.1 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-4.67, -0.38, 2.11))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.64, 1.64, 1.64)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a red, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.936, 0.838, 0.204, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.977\nbsdf.inputs['Metallic'].default_value = 0.037\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.047, 0.734, 0.869, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.315\nbsdf.inputs['Metallic'].default_value = 0.894\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 5 objects: plane, sphere, torus, cylinder, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.996471120316945, 3.1122327892560993, 3.1079735579416323) over 129 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.00, 3.11, 3.11)\n    obj.keyframe_insert(data_path=\"location\", frame=129)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.680232904174536, -0.14816899637017578, 4.712565283831523) over 209 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.68, -0.15, 4.71)\n    obj.keyframe_insert(data_path=\"location\", frame=209)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone and apply these modifiers: WAVE, DECIMATE, MIRROR", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane and apply these modifiers: SUBDIVISION_SURFACE, DISPLACE, ARRAY", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 8\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus at location -4.5, 2.9, 2.6 with scale 1.3", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.54, 2.88, 2.56))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.33, 1.33, 1.33)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.557, 0.323, 0.035, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.959\nbsdf.inputs['Metallic'].default_value = 0.858\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: plane, cube, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.578682900565209, -4.980313718091552, 1.3811375016963812) over 152 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.58, -4.98, 1.38)\n    obj.keyframe_insert(data_path=\"location\", frame=152)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 4 objects: sphere, cone, plane, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.521085386781364, -3.061841281670543, 2.965913142937479) over 165 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.52, -3.06, 2.97)\n    obj.keyframe_insert(data_path=\"location\", frame=165)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location -0.0, 3.2, 0.1 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-0.05, 3.15, 0.09))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.69, 1.69, 1.69)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a sphere and apply these modifiers: SUBDIVISION_SURFACE, SOLIDIFY", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.239242639520572, 2.190666974584367, 1.4570778356662217) over 183 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.24, 2.19, 1.46)\n    obj.keyframe_insert(data_path=\"location\", frame=183)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.888722599410741, -2.6809562411597443, 4.531782118101563) over 64 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.89, -2.68, 4.53)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: sphere, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: WAVE, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane and apply these modifiers: SKIN, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.735, 0.868, 0.893, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.549\nbsdf.inputs['Metallic'].default_value = 0.901\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.172, 0.234, 0.740, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.129\nbsdf.inputs['Metallic'].default_value = 0.581\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a plane and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a sphere and apply these modifiers: DISPLACE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder at location -0.5, -0.4, 2.5 with scale 1.6", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-0.51, -0.36, 2.55))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.60, 1.60, 1.60)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.372, 0.267, 0.456, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.752\nbsdf.inputs['Metallic'].default_value = 0.522\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.850480696764009, -2.2674549153779813, 2.294246398385462) over 141 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.85, -2.27, 2.29)\n    obj.keyframe_insert(data_path=\"location\", frame=141)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location -1.2, -4.5, 0.1 with scale 1.8", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.23, -4.48, 0.15))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.83, 1.83, 1.83)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.730260251013458, 0.7438390402116273, 2.999658360520414) over 196 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.73, 0.74, 3.00)\n    obj.keyframe_insert(data_path=\"location\", frame=196)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cone at location 2.1, 3.6, 0.0 with scale 1.0", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(2.06, 3.63, 0.04))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.98, 0.98, 0.98)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cube and apply these modifiers: LATTICE, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 5 objects: cone, cylinder, cube, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.187736242483932, -4.120913633589765, 3.609462735205795) over 178 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.19, -4.12, 3.61)\n    obj.keyframe_insert(data_path=\"location\", frame=178)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a torus at location -4.4, 1.4, 2.4 with scale 0.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.39, 1.36, 2.45))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.71, 0.71, 0.71)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a plane at location 4.2, 5.0, 2.2 with scale 1.3", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(4.21, 4.97, 2.23))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.35, 1.35, 1.35)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.092, 0.100, 0.326, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.287\nbsdf.inputs['Metallic'].default_value = 0.184\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a sphere at location 1.2, -1.6, 0.1 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(1.21, -1.63, 0.11))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.68, 1.68, 1.68)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.13703479198977, 2.6212834391822177, 4.332180468392997) over 191 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.14, 2.62, 4.33)\n    obj.keyframe_insert(data_path=\"location\", frame=191)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: cylinder, cone, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a green, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.651, 0.913, 0.016, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.761\nbsdf.inputs['Metallic'].default_value = 0.676\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a blue, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.201, 0.028, 0.803, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.604\nbsdf.inputs['Metallic'].default_value = 0.257\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.818820342492975, -0.4468560458877846, 4.309198513146731) over 216 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.82, -0.45, 4.31)\n    obj.keyframe_insert(data_path=\"location\", frame=216)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.329, 0.402, 0.186, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.119\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cylinder at location -0.7, -2.2, 0.1 with scale 2.0", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-0.72, -2.18, 0.06))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.95, 1.95, 1.95)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a plane at location 1.3, 4.8, 0.8 with scale 2.0", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.26, 4.77, 0.81))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.96, 1.96, 1.96)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a torus and apply these modifiers: DECIMATE, ARRAY", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.8, 0, 0)\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a red, smooth, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.991, 0.834, 0.818, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.045\nbsdf.inputs['Metallic'].default_value = 0.030\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.753211568530151, 0.28888604323875633, 0.9868826478129783) over 153 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.75, 0.29, 0.99)\n    obj.keyframe_insert(data_path=\"location\", frame=153)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a gray, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.105, 0.381, 0.376, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.312\nbsdf.inputs['Metallic'].default_value = 0.560\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (9.935667036061222, -4.83097325491063, 4.277063236613582) over 75 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.94, -4.83, 4.28)\n    obj.keyframe_insert(data_path=\"location\", frame=75)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Wave texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.914473397971804, 2.657704253380704, 4.688668752210208) over 98 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.91, 2.66, 4.69)\n    obj.keyframe_insert(data_path=\"location\", frame=98)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a plane at location 4.9, -0.7, 0.9 with scale 1.8", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(4.93, -0.71, 0.85))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.79, 1.79, 1.79)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.959553470841245, 3.8019626949321292, 1.5208301675493852) over 156 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.96, 3.80, 1.52)\n    obj.keyframe_insert(data_path=\"location\", frame=156)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.765695253472161, 3.581436845718967, 0.6939021296516157) over 146 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.77, 3.58, 0.69)\n    obj.keyframe_insert(data_path=\"location\", frame=146)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a sphere and apply these modifiers: SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 3\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus and apply these modifiers: BOOLEAN, LATTICE, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 3\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a plane and apply these modifiers: LATTICE, ARRAY, DECIMATE", "completion": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.5, 0, 0)\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.657, 0.605, 0.266, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.518\nbsdf.inputs['Metallic'].default_value = 0.548\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a torus and apply these modifiers: WIREFRAME, REMESH", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a sphere at location 4.1, 1.5, 1.6 with scale 0.9", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(4.13, 1.53, 1.57))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.90, 0.90, 0.90)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.701, 0.162, 0.916, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.807\nbsdf.inputs['Metallic'].default_value = 0.937\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.887652148940187, -1.153812258597724, 3.372600129738308) over 88 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.89, -1.15, 3.37)\n    obj.keyframe_insert(data_path=\"location\", frame=88)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: cone, cylinder, sphere, cube, plane, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, -2.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (5.403207932835551, 2.312317278092592, 3.250964950416257) over 132 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.40, 2.31, 3.25)\n    obj.keyframe_insert(data_path=\"location\", frame=132)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 4 objects: sphere, cube, torus, plane", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a red, rough, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.755, 0.656, 0.273, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.657\nbsdf.inputs['Metallic'].default_value = 0.547\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 3 objects: cone, torus, cylinder", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a torus and apply these modifiers: SKIN, SUBDIVISION_SURFACE", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 2\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cone and apply these modifiers: BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a torus and apply these modifiers: SIMPLE_DEFORM", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.440, 0.387, 0.131, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.865\nbsdf.inputs['Metallic'].default_value = 0.274\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Animate an object moving from (0, 0, 0) to (8.885616573562746, -3.3718702692981606, 3.5092849919802305) over 197 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.89, -3.37, 3.51)\n    obj.keyframe_insert(data_path=\"location\", frame=197)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a cube and apply these modifiers: MIRROR, SUBDIVISION_SURFACE, BOOLEAN", "completion": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 4\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a gray, rough, non-metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.689, 0.692, 0.000, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.751\nbsdf.inputs['Metallic'].default_value = 0.092\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a scene with 4 objects: cylinder, sphere, cube, torus", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a cylinder and apply these modifiers: CURVE, MIRROR", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a scene with 3 objects: torus, plane, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.037095259880085, -1.051899220875685, 3.534863957479045) over 97 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.04, -1.05, 3.53)\n    obj.keyframe_insert(data_path=\"location\", frame=97)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a scene with 6 objects: sphere, cylinder, torus, plane, cone, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, 1.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a procedural material using Voronoi texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a blue, smooth, metallic material", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.617, 0.287, 0.957, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.362\nbsdf.inputs['Metallic'].default_value = 0.876\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "basic", "quality_score": 0.87}
{"prompt": "Create a cone and apply these modifiers: SUBDIVISION_SURFACE, BOOLEAN, SKIN", "completion": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 2\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a cylinder at location 4.5, -3.8, 0.2 with scale 1.8", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.45, -3.83, 0.24))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.81, 1.81, 1.81)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Animate an object moving from (0, 0, 0) to (7.034474629060282, 4.413248573432346, 3.3941719859113513) over 134 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.03, 4.41, 3.39)\n    obj.keyframe_insert(data_path=\"location\", frame=134)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
{"prompt": "Create a procedural material using Noise texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a cylinder and apply these modifiers: SUBDIVISION_SURFACE, SKIN, DISPLACE", "completion": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a procedural material using Magic texture", "completion": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```", "category": "material", "difficulty": "intermediate", "quality_score": 0.92}
{"prompt": "Create a torus at location 2.8, 1.4, 1.0 with scale 1.7", "completion": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.84, 1.38, 0.96))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.74, 1.74, 1.74)\n```", "category": "geometry", "difficulty": "basic", "quality_score": 0.85}
{"prompt": "Create a scene with 5 objects: sphere, plane, cube, torus, cone", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a sphere and apply these modifiers: LATTICE, WIREFRAME, WAVE", "completion": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```", "category": "geometry", "difficulty": "intermediate", "quality_score": 0.9}
{"prompt": "Create a scene with 6 objects: plane, cylinder, cone, torus, sphere, cube", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, 1.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Create a scene with 6 objects: cone, cylinder, plane, cube, torus, sphere", "completion": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, 1.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```", "category": "scene", "difficulty": "intermediate", "quality_score": 0.88}
{"prompt": "Animate an object moving from (0, 0, 0) to (6.965393060982662, -2.3196010337355455, 3.7778100765642146) over 73 frames", "completion": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.97, -2.32, 3.78)\n    obj.keyframe_insert(data_path=\"location\", frame=73)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```", "category": "animation", "difficulty": "intermediate", "quality_score": 0.89}
