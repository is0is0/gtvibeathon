{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -0.9, -2.2, 2.5 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-0.92, -2.16, 2.49))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.30, 1.30, 1.30)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.882, 0.705, 0.025, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.190\nbsdf.inputs['Metallic'].default_value = 0.604\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.164445537233613, 3.0416345784036203, 3.3109112857877716) over 169 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.16, 3.04, 3.31)\n    obj.keyframe_insert(data_path=\"location\", frame=169)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: DECIMATE, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, torus, plane, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.058, 0.163, 0.899, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.601\nbsdf.inputs['Metallic'].default_value = 0.988\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: DISPLACE, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: WAVE, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.563677833483762, -3.403089845820503, 0.09691346089709951) over 172 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.56, -3.40, 0.10)\n    obj.keyframe_insert(data_path=\"location\", frame=172)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: torus, sphere, cone, plane, cylinder, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 2.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -0.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, cone, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.004, 0.211, 0.759, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.839\nbsdf.inputs['Metallic'].default_value = 0.968\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cube, torus, plane, cone, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -0.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -0.1, -0.1, 1.4 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-0.14, -0.10, 1.39))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.94, 1.94, 1.94)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, cube, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 0.8, -1.2, 0.0 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.83, -1.20, 0.02))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.96, 0.96, 0.96)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.300, 0.577, 0.057, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.843\nbsdf.inputs['Metallic'].default_value = 0.047\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.02881678164961, -1.5659139197525618, 0.8106431787040835) over 172 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.03, -1.57, 0.81)\n    obj.keyframe_insert(data_path=\"location\", frame=172)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.511, 0.171, 0.773, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.865\nbsdf.inputs['Metallic'].default_value = 0.315\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.187\nbevel_mod.segments = 4\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.419, 0.921, 0.197, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.071\nbsdf.inputs['Metallic'].default_value = 0.298\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.237, 0.540, 0.895, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.170\nbsdf.inputs['Metallic'].default_value = 0.344\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SIMPLE_DEFORM, CURVE, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 2\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.629637873065529, -4.673085836979009, 1.8861239430569583) over 90 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.63, -4.67, 1.89)\n    obj.keyframe_insert(data_path=\"location\", frame=90)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 2.6, 0.3, 1.5 with scale 0.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(2.58, 0.32, 1.47))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.55, 0.55, 0.55)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SKIN, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.4683848506757755, 3.100282079212498, 2.1194858506695757) over 179 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.47, 3.10, 2.12)\n    obj.keyframe_insert(data_path=\"location\", frame=179)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 3.9, 1.0, 1.6 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.92, 0.98, 1.59))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.70, 0.70, 0.70)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.031, 0.125, 0.637, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.333\nbsdf.inputs['Metallic'].default_value = 0.423\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 0.6, -1.3, 1.0 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.61, -1.29, 1.04))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.21, 1.21, 1.21)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location 2.9, -3.2, 2.7 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(2.89, -3.20, 2.74))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.46, 1.46, 1.46)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, torus, cube, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location 4.9, 1.3, 1.6 with scale 2.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(4.94, 1.31, 1.63))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.97, 1.97, 1.97)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BEVEL, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.014\nbevel_mod.segments = 6\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.297, 0.329, 0.417, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.073\nbsdf.inputs['Metallic'].default_value = 0.871\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.446331746099111, 1.5887487022438123, 3.235785883861842) over 151 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.45, 1.59, 3.24)\n    obj.keyframe_insert(data_path=\"location\", frame=151)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SOLIDIFY, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, torus, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -1.4, 4.7, 1.1 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-1.43, 4.72, 1.06))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.64, 0.64, 0.64)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.193722910398659, -0.180366247905126, 2.164011161305697) over 160 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.19, -0.18, 2.16)\n    obj.keyframe_insert(data_path=\"location\", frame=160)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.27656266686766, 4.985331104460709, 0.16915399451225832) over 121 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.28, 4.99, 0.17)\n    obj.keyframe_insert(data_path=\"location\", frame=121)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, cube, cone, cylinder, plane, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, -0.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SIMPLE_DEFORM, REMESH, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, plane, torus, cube, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, -0.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, plane, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: plane, cylinder, cone, cube, torus, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -1.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 2.6, 3.5, 2.3 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(2.62, 3.55, 2.26))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.13, 1.13, 1.13)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: MIRROR, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -1.9, 4.6, 0.2 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.86, 4.62, 0.25))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.99, 0.99, 0.99)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.208, 0.436, 0.766, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.735\nbsdf.inputs['Metallic'].default_value = 0.961\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 2.2, 4.0, 2.2 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(2.19, 3.98, 2.20))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.66, 0.66, 0.66)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cylinder, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.17229967661201, 0.3072413929128395, 2.4236221582035187) over 159 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.17, 0.31, 2.42)\n    obj.keyframe_insert(data_path=\"location\", frame=159)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, cylinder, plane, cone, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -1.7, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.635, 0.125, 0.746, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.531\nbsdf.inputs['Metallic'].default_value = 0.889\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -0.7, -3.2, 0.6 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-0.66, -3.21, 0.62))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.07, 1.07, 1.07)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cube, sphere, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, cylinder, cone, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -2.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, sphere, torus, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.806, 0.017, 0.395, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.728\nbsdf.inputs['Metallic'].default_value = 0.761\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 4.5, -3.6, 2.3 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(4.49, -3.64, 2.26))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.80, 0.80, 0.80)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.291993519177218, 1.924723387868399, 2.683266584497944) over 120 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.29, 1.92, 2.68)\n    obj.keyframe_insert(data_path=\"location\", frame=120)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 0.3, -4.5, 0.8 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.35, -4.52, 0.83))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.94, 0.94, 0.94)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.965862064153542, 0.05980940847138427, 0.9558437463951641) over 171 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.97, 0.06, 0.96)\n    obj.keyframe_insert(data_path=\"location\", frame=171)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cylinder, torus, sphere, cone, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 2.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -1.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 2.3, 4.8, 2.9 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.29, 4.78, 2.89))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.32, 1.32, 1.32)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.563878591273347, 4.047911270260215, 4.8641193698749525) over 141 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.56, 4.05, 4.86)\n    obj.keyframe_insert(data_path=\"location\", frame=141)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, plane, torus, cylinder, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -1.1, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.8577709967349945, -2.755111843525139, 0.4457802277306838) over 141 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.86, -2.76, 0.45)\n    obj.keyframe_insert(data_path=\"location\", frame=141)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -0.9, -1.5, 2.2 with scale 0.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-0.90, -1.55, 2.22))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.53, 0.53, 0.53)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.656, 0.429, 0.129, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.081\nbsdf.inputs['Metallic'].default_value = 0.735\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.537705787380737, 2.290456885012059, 3.6572597849462736) over 196 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.54, 2.29, 3.66)\n    obj.keyframe_insert(data_path=\"location\", frame=196)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SOLIDIFY, LATTICE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.386949521321017, 1.9709337132521334, 2.8240120281724574) over 153 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.39, 1.97, 2.82)\n    obj.keyframe_insert(data_path=\"location\", frame=153)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.92783112028583, -0.39667215891826313, 2.293624585329652) over 150 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.93, -0.40, 2.29)\n    obj.keyframe_insert(data_path=\"location\", frame=150)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.643, 0.418, 0.364, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.372\nbsdf.inputs['Metallic'].default_value = 0.678\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: CURVE, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: BEVEL, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.098\nbevel_mod.segments = 2\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.7, 0, 0)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.444241811040335, 2.112681268651018, 4.6660509899124705) over 133 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.44, 2.11, 4.67)\n    obj.keyframe_insert(data_path=\"location\", frame=133)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BOOLEAN, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: torus, cube, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.0381379861214475, 2.778396315316904, 3.6043303970336877) over 215 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.04, 2.78, 3.60)\n    obj.keyframe_insert(data_path=\"location\", frame=215)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.869614237242983, -0.47036295101798764, 4.409811248592113) over 222 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.87, -0.47, 4.41)\n    obj.keyframe_insert(data_path=\"location\", frame=222)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.612879601020577, -2.0375778361116925, 1.4563431444785975) over 108 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.61, -2.04, 1.46)\n    obj.keyframe_insert(data_path=\"location\", frame=108)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.630, 0.816, 0.854, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.403\nbsdf.inputs['Metallic'].default_value = 0.253\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -1.8, -2.9, 2.6 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.83, -2.88, 2.64))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.74, 0.74, 0.74)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.963, 0.009, 0.399, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.411\nbsdf.inputs['Metallic'].default_value = 0.264\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: torus, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location 0.7, -1.5, 0.5 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.74, -1.53, 0.55))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (0.90, 0.90, 0.90)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: MIRROR, SIMPLE_DEFORM, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -2.2, -3.4, 1.7 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-2.15, -3.44, 1.71))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.81, 1.81, 1.81)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.062588061908937, 3.2921639418308892, 3.1345569312951795) over 214 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.06, 3.29, 3.13)\n    obj.keyframe_insert(data_path=\"location\", frame=214)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.706, 0.567, 0.607, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.238\nbsdf.inputs['Metallic'].default_value = 0.038\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.088, 0.409, 0.593, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.658\nbsdf.inputs['Metallic'].default_value = 0.217\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.261, 0.074, 0.722, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.528\nbsdf.inputs['Metallic'].default_value = 0.940\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cone, sphere, cube, plane, cylinder, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 1.7, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.498540924675002, 2.572027527868598, 1.7883030989131337) over 168 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.50, 2.57, 1.79)\n    obj.keyframe_insert(data_path=\"location\", frame=168)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.396618276887624, 0.15644303627184364, 0.7190797457962345) over 134 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.40, 0.16, 0.72)\n    obj.keyframe_insert(data_path=\"location\", frame=134)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.314, 0.554, 0.514, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.762\nbsdf.inputs['Metallic'].default_value = 0.894\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.603, 1.000, 0.115, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.243\nbsdf.inputs['Metallic'].default_value = 0.063\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cone, plane, sphere, cube, cylinder, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, -1.4, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: WIREFRAME, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cube, torus, plane, cylinder, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.924, 0.940, 0.512, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.017\nbsdf.inputs['Metallic'].default_value = 0.112\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.427, 0.919, 0.091, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.481\nbsdf.inputs['Metallic'].default_value = 0.002\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -1.4, 4.9, 0.9 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-1.37, 4.95, 0.91))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.73, 1.73, 1.73)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.567, 0.318, 0.449, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.357\nbsdf.inputs['Metallic'].default_value = 0.279\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.069807334228493, -0.2249511995312492, 3.965274454630125) over 125 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.07, -0.22, 3.97)\n    obj.keyframe_insert(data_path=\"location\", frame=125)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.520, 0.451, 0.238, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.644\nbsdf.inputs['Metallic'].default_value = 0.811\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.405154060949855, -4.422955266996087, 2.583080158092158) over 211 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.41, -4.42, 2.58)\n    obj.keyframe_insert(data_path=\"location\", frame=211)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 6\narray_mod.relative_offset_displace = (1.6, 0, 0)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -2.4, -4.5, 2.0 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-2.41, -4.50, 1.98))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.95, 1.95, 1.95)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.566287200311515, 1.663601603307228, 4.593681348329106) over 106 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.57, 1.66, 4.59)\n    obj.keyframe_insert(data_path=\"location\", frame=106)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.630, 0.690, 0.484, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.223\nbsdf.inputs['Metallic'].default_value = 0.135\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.353239369296313, -2.7422360293365933, 3.4956225389514333) over 71 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.35, -2.74, 3.50)\n    obj.keyframe_insert(data_path=\"location\", frame=71)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.930, 0.947, 0.787, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.487\nbsdf.inputs['Metallic'].default_value = 0.507\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cylinder, cone, plane, cube, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 4.2, 2.3, 0.0 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(4.25, 2.35, 0.04))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.94, 1.94, 1.94)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.550237902784619, 3.756935727277785, 3.860554821861702) over 194 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.55, 3.76, 3.86)\n    obj.keyframe_insert(data_path=\"location\", frame=194)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.485, 0.866, 0.109, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.791\nbsdf.inputs['Metallic'].default_value = 0.457\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: CURVE, WIREFRAME, DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 0.2, -4.0, 0.6 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.16, -4.00, 0.56))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.12, 1.12, 1.12)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: ARRAY, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 6\narray_mod.relative_offset_displace = (1.5, 0, 0)\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.609, 0.664, 0.538, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.049\nbsdf.inputs['Metallic'].default_value = 0.847\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.702, 0.800, 0.614, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.145\nbsdf.inputs['Metallic'].default_value = 0.488\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 3.0, 0.4, 1.8 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(2.98, 0.36, 1.79))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.85, 0.85, 0.85)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.6245201236904725, 4.52031061323123, 1.8537786589499765) over 175 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.62, 4.52, 1.85)\n    obj.keyframe_insert(data_path=\"location\", frame=175)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: plane, sphere, torus, cone, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, -1.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.438, 0.720, 0.770, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.229\nbsdf.inputs['Metallic'].default_value = 0.538\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.524, 0.019, 0.069, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.488\nbsdf.inputs['Metallic'].default_value = 0.152\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -3.8, -0.4, 1.5 with scale 1.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.81, -0.36, 1.50))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.60, 1.60, 1.60)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.739720851214607, -1.6384480158924442, 1.6588773603948366) over 131 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.74, -1.64, 1.66)\n    obj.keyframe_insert(data_path=\"location\", frame=131)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.857885034179585, -2.605038148095453, 4.252187092549232) over 60 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.86, -2.61, 4.25)\n    obj.keyframe_insert(data_path=\"location\", frame=60)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.941, 0.386, 0.472, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.311\nbsdf.inputs['Metallic'].default_value = 0.800\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.95591121073868, 4.110194762223763, 4.025369364797966) over 224 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.96, 4.11, 4.03)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.926968628571209, -2.6917890954503996, 0.30210837670491875) over 88 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.93, -2.69, 0.30)\n    obj.keyframe_insert(data_path=\"location\", frame=88)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cone, torus, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.913, 0.199, 0.748, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.593\nbsdf.inputs['Metallic'].default_value = 0.225\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 3.7, 4.6, 0.4 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.70, 4.59, 0.37))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.84, 0.84, 0.84)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cube, plane, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.890054317811728, 2.2552736387548036, 1.371181641344572) over 114 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.89, 2.26, 1.37)\n    obj.keyframe_insert(data_path=\"location\", frame=114)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.3949477431572905, -0.6723404916749107, 0.195266748466299) over 180 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.39, -0.67, 0.20)\n    obj.keyframe_insert(data_path=\"location\", frame=180)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.373, 0.834, 0.482, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.410\nbsdf.inputs['Metallic'].default_value = 0.139\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.488077103238011, -4.849406715173005, 2.0541358198556035) over 187 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.49, -4.85, 2.05)\n    obj.keyframe_insert(data_path=\"location\", frame=187)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -1.5, 0.5, 0.1 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-1.53, 0.48, 0.09))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.77, 1.77, 1.77)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.307096675250849, 1.273649551760486, 4.9524697739893755) over 177 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.31, 1.27, 4.95)\n    obj.keyframe_insert(data_path=\"location\", frame=177)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.6426735561529, 4.122781801645933, 2.621720625252327) over 159 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.64, 4.12, 2.62)\n    obj.keyframe_insert(data_path=\"location\", frame=159)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.919, 0.135, 0.627, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.053\nbsdf.inputs['Metallic'].default_value = 0.583\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 1.8, -3.8, 2.0 with scale 0.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(1.85, -3.78, 1.96))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.54, 0.54, 0.54)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.558, 0.347, 0.981, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.702\nbsdf.inputs['Metallic'].default_value = 0.295\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cylinder, sphere, cone, plane, cube, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 0.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.548637791989039, 4.956171308238407, 3.7659137929345006) over 154 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.55, 4.96, 3.77)\n    obj.keyframe_insert(data_path=\"location\", frame=154)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, plane, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.314, 0.049, 0.153, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.212\nbsdf.inputs['Metallic'].default_value = 0.444\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.926, 0.539, 0.621, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.230\nbsdf.inputs['Metallic'].default_value = 0.098\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.254, 0.410, 0.773, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.229\nbsdf.inputs['Metallic'].default_value = 0.080\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: DISPLACE, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, plane, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.951217819947983, 1.3016456099006781, 0.1768011230490396) over 95 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.95, 1.30, 0.18)\n    obj.keyframe_insert(data_path=\"location\", frame=95)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, torus, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.576, 0.114, 0.861, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.948\nbsdf.inputs['Metallic'].default_value = 0.163\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BOOLEAN, SOLIDIFY, CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: BOOLEAN, ARRAY, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 7\narray_mod.relative_offset_displace = (1.7, 0, 0)\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.110896833891285, 0.7439846703963662, 0.9747443570747921) over 124 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.11, 0.74, 0.97)\n    obj.keyframe_insert(data_path=\"location\", frame=124)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, torus, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -1.8, 0.7, 2.9 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-1.78, 0.68, 2.87))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.77, 0.77, 0.77)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.406928967638515, -0.1989357180682294, 1.8354296571917583) over 198 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.41, -0.20, 1.84)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.491, 0.035, 0.873, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.508\nbsdf.inputs['Metallic'].default_value = 0.059\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 2.7, -1.1, 2.1 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(2.72, -1.12, 2.09))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.67, 1.67, 1.67)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.045361836440837, 3.4076348592298764, 1.5803610484705306) over 129 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.05, 3.41, 1.58)\n    obj.keyframe_insert(data_path=\"location\", frame=129)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.350916045462791, -4.408003501746322, 3.7434649156927637) over 218 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.35, -4.41, 3.74)\n    obj.keyframe_insert(data_path=\"location\", frame=218)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.779969772616043, -3.2950976107799077, 3.723852957484906) over 114 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.78, -3.30, 3.72)\n    obj.keyframe_insert(data_path=\"location\", frame=114)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.33844989703067, 3.0059783837271343, 1.8853242343529275) over 172 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.34, 3.01, 1.89)\n    obj.keyframe_insert(data_path=\"location\", frame=172)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SIMPLE_DEFORM, WIREFRAME, CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.741844155399848, 4.539734757334603, 4.979120273799765) over 216 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.74, 4.54, 4.98)\n    obj.keyframe_insert(data_path=\"location\", frame=216)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.902, 0.065, 0.338, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.962\nbsdf.inputs['Metallic'].default_value = 0.212\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.864312611190538, 2.8246786337987526, 1.898407084365058) over 201 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.86, 2.82, 1.90)\n    obj.keyframe_insert(data_path=\"location\", frame=201)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.490380998629406, 2.297946571467464, 0.1540282725908132) over 166 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.49, 2.30, 0.15)\n    obj.keyframe_insert(data_path=\"location\", frame=166)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.845463075831207, 2.7409877502749804, 1.373729352770416) over 198 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.85, 2.74, 1.37)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.096, 0.849, 0.478, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.561\nbsdf.inputs['Metallic'].default_value = 0.464\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.618, 0.619, 0.761, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.719\nbsdf.inputs['Metallic'].default_value = 0.261\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -4.2, 1.7, 1.6 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.17, 1.72, 1.61))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.37, 1.37, 1.37)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cube, sphere, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cone, torus, sphere, cylinder, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 1.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.894, 0.069, 0.787, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.712\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.326, 0.341, 0.727, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.534\nbsdf.inputs['Metallic'].default_value = 0.480\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.390129935364998, 3.1843661623493773, 4.1020107916192785) over 206 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.39, 3.18, 4.10)\n    obj.keyframe_insert(data_path=\"location\", frame=206)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.5375273998931505, -4.864563173448814, 1.2241373486317504) over 226 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.54, -4.86, 1.22)\n    obj.keyframe_insert(data_path=\"location\", frame=226)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, cube, torus, cylinder, cone, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -2.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -0.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, 0.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 4.5, 2.4, 0.8 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.55, 2.39, 0.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.07, 1.07, 1.07)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.0008360975121064, 2.2829570165210704, 4.513123227941915) over 158 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.00, 2.28, 4.51)\n    obj.keyframe_insert(data_path=\"location\", frame=158)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -2.8, -1.4, 1.2 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-2.76, -1.42, 1.21))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.93, 0.93, 0.93)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.941, 0.146, 0.369, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.330\nbsdf.inputs['Metallic'].default_value = 0.216\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, sphere, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 3\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.820, 0.351, 0.345, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.237\nbsdf.inputs['Metallic'].default_value = 0.296\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.468, 0.089, 0.587, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.148\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: LATTICE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.137, 0.610, 0.757, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.733\nbsdf.inputs['Metallic'].default_value = 0.559\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.315253725266377, -0.5225133238923778, 4.134743195444792) over 135 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.32, -0.52, 4.13)\n    obj.keyframe_insert(data_path=\"location\", frame=135)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.693679228688106, 4.501879005977068, 1.5976417530284532) over 200 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.69, 4.50, 1.60)\n    obj.keyframe_insert(data_path=\"location\", frame=200)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SKIN, DISPLACE, ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.6, 0, 0)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.437, 0.841, 0.394, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.322\nbsdf.inputs['Metallic'].default_value = 0.643\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 1.5, -2.8, 1.8 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.47, -2.78, 1.79))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.53, 1.53, 1.53)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.106, 0.210, 0.920, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.472\nbsdf.inputs['Metallic'].default_value = 0.836\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.818546851069314, -4.228306140321495, 3.1870501628169405) over 221 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.82, -4.23, 3.19)\n    obj.keyframe_insert(data_path=\"location\", frame=221)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.910697531773108, -3.912137546004908, 4.955182472763849) over 108 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.91, -3.91, 4.96)\n    obj.keyframe_insert(data_path=\"location\", frame=108)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 4.4, -1.9, 2.0 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(4.44, -1.86, 2.04))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.15, 1.15, 1.15)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.860, 0.711, 0.452, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.866\nbsdf.inputs['Metallic'].default_value = 0.966\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.6429969069995, -2.5887906164633034, 4.263587783914033) over 130 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.64, -2.59, 4.26)\n    obj.keyframe_insert(data_path=\"location\", frame=130)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.924, 0.855, 0.376, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.141\nbsdf.inputs['Metallic'].default_value = 0.029\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 0.3, -1.7, 2.4 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.27, -1.69, 2.42))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.41, 1.41, 1.41)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.794, 0.188, 0.354, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.389\nbsdf.inputs['Metallic'].default_value = 0.777\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.744, 0.324, 0.751, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.859\nbsdf.inputs['Metallic'].default_value = 0.154\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WIREFRAME, DECIMATE, CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -3.0, -4.4, 2.2 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-2.95, -4.45, 2.23))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.05, 1.05, 1.05)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.299, 0.290, 0.416, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.008\nbsdf.inputs['Metallic'].default_value = 0.915\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 2.5, 1.0, 1.0 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(2.45, 0.99, 0.97))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.80, 0.80, 0.80)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 4.6, -0.5, 2.7 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(4.65, -0.52, 2.65))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.73, 0.73, 0.73)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: REMESH, SIMPLE_DEFORM, BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.454371261184107, -4.621778541528091, 2.8860982983069654) over 218 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.45, -4.62, 2.89)\n    obj.keyframe_insert(data_path=\"location\", frame=218)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.869, 0.630, 0.865, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.133\nbsdf.inputs['Metallic'].default_value = 0.794\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.423058491091833, -2.746708706943888, 1.2272865841912173) over 72 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.42, -2.75, 1.23)\n    obj.keyframe_insert(data_path=\"location\", frame=72)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.412, 0.152, 0.204, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.238\nbsdf.inputs['Metallic'].default_value = 0.123\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.664874797946204, -4.012721353748525, 4.619807989961632) over 180 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.66, -4.01, 4.62)\n    obj.keyframe_insert(data_path=\"location\", frame=180)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.671205977893123, 3.694608755491771, 1.5531154081309773) over 184 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.67, 3.69, 1.55)\n    obj.keyframe_insert(data_path=\"location\", frame=184)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.557, 0.117, 0.958, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.333\nbsdf.inputs['Metallic'].default_value = 0.741\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.620, 0.798, 0.288, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.871\nbsdf.inputs['Metallic'].default_value = 0.931\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.472716921972196, -2.653885218098732, 4.296180549668536) over 240 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.47, -2.65, 4.30)\n    obj.keyframe_insert(data_path=\"location\", frame=240)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.973, 0.076, 0.325, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.219\nbsdf.inputs['Metallic'].default_value = 0.316\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cube, sphere, cone, cylinder, torus, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create plane 6\nbpy.ops.mesh.mesh_primitive_plane_add(location=(15.0, -0.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Plane_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.998241479079601, 1.2115973165874072, 4.671349530188143) over 176 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.00, 1.21, 4.67)\n    obj.keyframe_insert(data_path=\"location\", frame=176)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: plane, sphere, cone, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.1, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, torus, cone, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.518226406820946, -3.5346368803224824, 1.4777415934903182) over 75 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.52, -3.53, 1.48)\n    obj.keyframe_insert(data_path=\"location\", frame=75)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, cube, plane, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.458, 0.675, 0.056, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.809\nbsdf.inputs['Metallic'].default_value = 0.597\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.899, 0.690, 0.333, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.466\nbsdf.inputs['Metallic'].default_value = 0.852\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.953476976121967, -1.6793239004402372, 4.538428002310139) over 127 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.95, -1.68, 4.54)\n    obj.keyframe_insert(data_path=\"location\", frame=127)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.434264457369743, 3.3478958203114697, 3.4348598991129546) over 168 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.43, 3.35, 3.43)\n    obj.keyframe_insert(data_path=\"location\", frame=168)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.603, 0.581, 0.869, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.947\nbsdf.inputs['Metallic'].default_value = 0.067\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cylinder, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.837, 0.699, 0.795, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.669\nbsdf.inputs['Metallic'].default_value = 0.147\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.045, 0.692, 0.821, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.863\nbsdf.inputs['Metallic'].default_value = 0.704\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.44102453924285, -0.5305022328350697, 3.9337203289728) over 75 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.44, -0.53, 3.93)\n    obj.keyframe_insert(data_path=\"location\", frame=75)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SUBDIVISION_SURFACE, ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 8\narray_mod.relative_offset_displace = (1.7, 0, 0)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.088039855073603, 0.08765648960508088, 2.9760044850535365) over 161 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.09, 0.09, 2.98)\n    obj.keyframe_insert(data_path=\"location\", frame=161)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.188, 0.078, 0.029, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.683\nbsdf.inputs['Metallic'].default_value = 0.638\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cylinder, sphere, cube, torus, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -0.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.216134898526459, 4.083757845702735, 1.004159152670761) over 74 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.22, 4.08, 1.00)\n    obj.keyframe_insert(data_path=\"location\", frame=74)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 4.3, 4.7, 2.3 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(4.29, 4.67, 2.28))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.12, 1.12, 1.12)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.816, 0.741, 0.908, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.129\nbsdf.inputs['Metallic'].default_value = 0.598\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.002, 0.618, 0.376, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.970\nbsdf.inputs['Metallic'].default_value = 0.609\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, plane, cylinder, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, cylinder, torus, cube, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cone, cube, plane, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 1.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cone, sphere, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.192, 0.119, 0.417, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.128\nbsdf.inputs['Metallic'].default_value = 0.606\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.175, 0.839, 0.095, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.090\nbsdf.inputs['Metallic'].default_value = 0.563\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.1138396308668135, 1.8139620961616032, 3.1010498785228444) over 153 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.11, 1.81, 3.10)\n    obj.keyframe_insert(data_path=\"location\", frame=153)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, torus, cube, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: torus, cube, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.152244771391184, 1.5162177679521873, 1.1140758253290772) over 64 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.15, 1.52, 1.11)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -3.6, 1.6, 2.1 with scale 2.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-3.62, 1.58, 2.07))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.96, 1.96, 1.96)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.730911649580433, -0.3707997947165662, 4.974813649744123) over 212 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.73, -0.37, 4.97)\n    obj.keyframe_insert(data_path=\"location\", frame=212)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.114521806883355, -2.130139785859458, 3.884442701574124) over 140 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.11, -2.13, 3.88)\n    obj.keyframe_insert(data_path=\"location\", frame=140)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.049, 0.073, 0.284, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.683\nbsdf.inputs['Metallic'].default_value = 0.555\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.962, 0.150, 0.195, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.089\nbsdf.inputs['Metallic'].default_value = 0.911\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.387, 0.337, 0.859, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.378\nbsdf.inputs['Metallic'].default_value = 0.659\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 2.0, 3.9, 2.9 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(1.97, 3.88, 2.93))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.45, 1.45, 1.45)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.463, 0.965, 0.858, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.427\nbsdf.inputs['Metallic'].default_value = 0.205\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.277, 0.108, 0.164, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.956\nbsdf.inputs['Metallic'].default_value = 0.017\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.478925149434426, -0.520894258568382, 2.2754039097885888) over 174 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.48, -0.52, 2.28)\n    obj.keyframe_insert(data_path=\"location\", frame=174)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.442, 0.539, 0.874, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.124\nbsdf.inputs['Metallic'].default_value = 0.820\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -3.9, 3.8, 0.3 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-3.89, 3.77, 0.29))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.52, 1.52, 1.52)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.049, 0.484, 0.054, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.291\nbsdf.inputs['Metallic'].default_value = 0.087\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 3.3, 4.5, 0.6 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.35, 4.45, 0.63))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.73, 0.73, 0.73)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 0.4, 1.9, 0.1 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.39, 1.90, 0.09))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.72, 1.72, 1.72)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.872461016257818, 2.679125395122732, 2.7189553619811506) over 229 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.87, 2.68, 2.72)\n    obj.keyframe_insert(data_path=\"location\", frame=229)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.942, 0.038, 0.200, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.804\nbsdf.inputs['Metallic'].default_value = 0.945\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: torus, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, torus, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.037, 0.270, 0.310, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.239\nbsdf.inputs['Metallic'].default_value = 0.623\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.648, 0.242, 0.087, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.686\nbsdf.inputs['Metallic'].default_value = 0.305\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.053256398757455, 1.9499859782334532, 3.7543250468659823) over 101 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.05, 1.95, 3.75)\n    obj.keyframe_insert(data_path=\"location\", frame=101)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.829, 0.575, 0.399, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.376\nbsdf.inputs['Metallic'].default_value = 0.488\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.083906544771734, 0.913712577222543, 3.5008064503106957) over 72 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.08, 0.91, 3.50)\n    obj.keyframe_insert(data_path=\"location\", frame=72)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -2.3, -4.8, 2.9 with scale 1.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-2.35, -4.79, 2.88))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.59, 1.59, 1.59)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.86686008208897, 1.1882241064184749, 3.827435039834257) over 118 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.87, 1.19, 3.83)\n    obj.keyframe_insert(data_path=\"location\", frame=118)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.559, 0.474, 0.580, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.500\nbsdf.inputs['Metallic'].default_value = 0.960\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cube, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.374, 0.207, 0.957, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.423\nbsdf.inputs['Metallic'].default_value = 0.878\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.632, 0.620, 0.843, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.531\nbsdf.inputs['Metallic'].default_value = 0.584\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.287, 0.464, 0.529, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.678\nbsdf.inputs['Metallic'].default_value = 0.958\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 2.2, 2.7, 2.0 with scale 2.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.25, 2.68, 1.99))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.95, 1.95, 1.95)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.625, 0.119, 0.636, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.727\nbsdf.inputs['Metallic'].default_value = 0.527\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SOLIDIFY, SUBDIVISION_SURFACE, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 3\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: SOLIDIFY, SUBDIVISION_SURFACE, BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 2\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.040, 0.006, 0.231, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.427\nbsdf.inputs['Metallic'].default_value = 0.108\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.778, 0.321, 0.627, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.906\nbsdf.inputs['Metallic'].default_value = 0.109\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.901961819434037, 4.744542348547206, 2.065016201383752) over 147 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.90, 4.74, 2.07)\n    obj.keyframe_insert(data_path=\"location\", frame=147)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, cube, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.768, 0.503, 0.131, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.968\nbsdf.inputs['Metallic'].default_value = 0.209\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.182, 0.573, 0.310, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.746\nbsdf.inputs['Metallic'].default_value = 0.642\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.445845839399471, -3.0620657205488824, 4.937646190228076) over 134 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.45, -3.06, 4.94)\n    obj.keyframe_insert(data_path=\"location\", frame=134)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WIREFRAME, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.533, 0.880, 0.993, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.932\nbsdf.inputs['Metallic'].default_value = 0.990\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.087220136563592, -3.282544849726532, 2.210214257318557) over 62 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.09, -3.28, 2.21)\n    obj.keyframe_insert(data_path=\"location\", frame=62)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.298709699843297, 0.39437384675356757, 1.357590970768261) over 186 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.30, 0.39, 1.36)\n    obj.keyframe_insert(data_path=\"location\", frame=186)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: DISPLACE, BEVEL, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.107\nbevel_mod.segments = 3\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.602056204873136, 1.3725065971939454, 3.2162424628293267) over 111 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.60, 1.37, 3.22)\n    obj.keyframe_insert(data_path=\"location\", frame=111)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.443423710947583, -0.6836694577622264, 1.30971662865687) over 161 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.44, -0.68, 1.31)\n    obj.keyframe_insert(data_path=\"location\", frame=161)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.949764092702992, 2.112070287727903, 2.408084190296061) over 213 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.95, 2.11, 2.41)\n    obj.keyframe_insert(data_path=\"location\", frame=213)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.294401613361263, 3.7865489776189207, 0.5439979481343399) over 136 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.29, 3.79, 0.54)\n    obj.keyframe_insert(data_path=\"location\", frame=136)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.141, 0.753, 0.693, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.162\nbsdf.inputs['Metallic'].default_value = 0.312\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, plane, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, plane, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.408, 0.753, 0.615, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.272\nbsdf.inputs['Metallic'].default_value = 0.395\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 5\narray_mod.relative_offset_displace = (1.8, 0, 0)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SOLIDIFY, MIRROR, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.620611730557446, 2.9390376596776404, 4.550484079374738) over 224 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.62, 2.94, 4.55)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: plane, sphere, torus, cube, cylinder, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, 2.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.534, 0.499, 0.290, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.512\nbsdf.inputs['Metallic'].default_value = 0.269\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 2.2, -1.8, 2.8 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.23, -1.78, 2.80))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.42, 1.42, 1.42)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.662181281656752, 4.549318703317159, 0.7038978889018643) over 67 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.66, 4.55, 0.70)\n    obj.keyframe_insert(data_path=\"location\", frame=67)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -3.1, 2.3, 2.7 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-3.10, 2.28, 2.69))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.62, 0.62, 0.62)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.580947139574642, 1.1490805858124968, 3.0026901838788107) over 179 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.58, 1.15, 3.00)\n    obj.keyframe_insert(data_path=\"location\", frame=179)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -2.0, -4.6, 0.7 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-2.01, -4.55, 0.67))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.19, 1.19, 1.19)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.716686193667984, 1.6844022606542737, 1.9816978992434109) over 199 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.72, 1.68, 1.98)\n    obj.keyframe_insert(data_path=\"location\", frame=199)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.895, 0.216, 0.428, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.509\nbsdf.inputs['Metallic'].default_value = 0.405\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.632182443501753, 1.462071173258627, 4.720974996780992) over 138 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.63, 1.46, 4.72)\n    obj.keyframe_insert(data_path=\"location\", frame=138)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.905, 0.784, 0.739, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.233\nbsdf.inputs['Metallic'].default_value = 0.950\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.475, 0.032, 0.045, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.715\nbsdf.inputs['Metallic'].default_value = 0.305\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -3.5, -0.0, 1.2 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.55, -0.04, 1.22))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.56, 0.56, 0.56)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.662, 0.807, 0.058, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.477\nbsdf.inputs['Metallic'].default_value = 0.527\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.41357777036946, -3.638338530051165, 3.264594148829797) over 103 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.41, -3.64, 3.26)\n    obj.keyframe_insert(data_path=\"location\", frame=103)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.996, 0.274, 0.497, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.368\nbsdf.inputs['Metallic'].default_value = 0.041\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, sphere, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, sphere, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.805, 0.483, 0.273, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.941\nbsdf.inputs['Metallic'].default_value = 0.293\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, torus, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.337, 0.832, 0.734, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.745\nbsdf.inputs['Metallic'].default_value = 0.371\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.153157451089966, -4.836398732605009, 3.1418036251529102) over 61 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.15, -4.84, 3.14)\n    obj.keyframe_insert(data_path=\"location\", frame=61)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.926, 0.937, 0.302, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.022\nbsdf.inputs['Metallic'].default_value = 0.576\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: torus, plane, cylinder, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cone, sphere, plane, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SUBDIVISION_SURFACE, WIREFRAME, MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 2\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.552235151364149, -4.834118082337184, 2.580741024425572) over 230 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.55, -4.83, 2.58)\n    obj.keyframe_insert(data_path=\"location\", frame=230)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cone, sphere, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -2.1, -5.0, 1.1 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.11, -4.96, 1.06))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.80, 0.80, 0.80)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 1.7, -4.8, 0.8 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(1.69, -4.79, 0.79))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.36, 1.36, 1.36)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 0.1, 1.2, 1.6 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.06, 1.22, 1.55))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.38, 1.38, 1.38)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, cube, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.648, 0.862, 0.285, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.907\nbsdf.inputs['Metallic'].default_value = 0.217\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.517350606601795, -3.1095337523034807, 2.8333196802737186) over 209 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.52, -3.11, 2.83)\n    obj.keyframe_insert(data_path=\"location\", frame=209)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 3.8, 4.5, 1.5 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.78, 4.55, 1.54))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.18, 1.18, 1.18)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.68050521925731, -2.883193235498994, 3.14777907152854) over 61 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.68, -2.88, 3.15)\n    obj.keyframe_insert(data_path=\"location\", frame=61)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.242865709833422, 1.2480330139693372, 0.3702752704188489) over 205 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.24, 1.25, 0.37)\n    obj.keyframe_insert(data_path=\"location\", frame=205)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, plane, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.629, 0.615, 0.300, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.377\nbsdf.inputs['Metallic'].default_value = 0.848\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.623121966211892, 2.9063861446791197, 2.6705528388178394) over 154 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.62, 2.91, 2.67)\n    obj.keyframe_insert(data_path=\"location\", frame=154)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.468, 0.152, 0.674, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.868\nbsdf.inputs['Metallic'].default_value = 0.731\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.583, 0.639, 0.965, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.211\nbsdf.inputs['Metallic'].default_value = 0.985\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: torus, plane, cone, cylinder, sphere, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 0.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -0.9, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: torus, cube, cylinder, plane, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n# Create sphere 6\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(15.0, -0.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Sphere_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: REMESH, BOOLEAN, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.961, 0.119, 0.394, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.185\nbsdf.inputs['Metallic'].default_value = 0.676\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cube, plane, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.6516149768773545, 2.118059273159859, 3.7930768584542713) over 71 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.65, 2.12, 3.79)\n    obj.keyframe_insert(data_path=\"location\", frame=71)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.598, 0.493, 0.990, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.155\nbsdf.inputs['Metallic'].default_value = 0.150\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.625035397840538, -0.21609959359551478, 1.9785147773892542) over 108 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.63, -0.22, 1.98)\n    obj.keyframe_insert(data_path=\"location\", frame=108)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.01164799492102, 1.4449021721704627, 2.317379355513265) over 105 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.01, 1.44, 2.32)\n    obj.keyframe_insert(data_path=\"location\", frame=105)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SKIN, BEVEL, DISPLACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.115\nbevel_mod.segments = 3\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.759480969529566, -1.6128591740348828, 4.225753727882363) over 207 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.76, -1.61, 4.23)\n    obj.keyframe_insert(data_path=\"location\", frame=207)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: plane, cone, cube, cylinder, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.114, 0.269, 0.887, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.271\nbsdf.inputs['Metallic'].default_value = 0.742\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.416494185032172, 3.8484369361180164, 4.2821798688247945) over 107 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.42, 3.85, 4.28)\n    obj.keyframe_insert(data_path=\"location\", frame=107)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.7024873211287765, -4.870111937574184, 3.3266566018355768) over 189 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.70, -4.87, 3.33)\n    obj.keyframe_insert(data_path=\"location\", frame=189)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.727384836787451, 1.2688097693184837, 0.8963541638150779) over 236 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.73, 1.27, 0.90)\n    obj.keyframe_insert(data_path=\"location\", frame=236)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WAVE, BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.144\nbevel_mod.segments = 5\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: plane, cone, sphere, torus, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, -1.0, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: plane, cylinder, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.782157224126768, 3.634456382661419, 4.6496655395542135) over 195 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.78, 3.63, 4.65)\n    obj.keyframe_insert(data_path=\"location\", frame=195)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.877819944670236, 3.184775917210329, 0.15016153329819648) over 119 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.88, 3.18, 0.15)\n    obj.keyframe_insert(data_path=\"location\", frame=119)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.802, 0.735, 0.179, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.272\nbsdf.inputs['Metallic'].default_value = 0.786\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.06719112067897, -4.48012030948113, 4.334141907677672) over 195 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.07, -4.48, 4.33)\n    obj.keyframe_insert(data_path=\"location\", frame=195)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.689, 0.861, 0.522, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.138\nbsdf.inputs['Metallic'].default_value = 0.363\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 0.0, -2.1, 2.9 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.00, -2.11, 2.90))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.21, 1.21, 1.21)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.442, 0.992, 0.700, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.837\nbsdf.inputs['Metallic'].default_value = 0.950\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.077, 0.466, 0.890, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.382\nbsdf.inputs['Metallic'].default_value = 0.332\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.2417662107932745, 3.6940807528554735, 1.2819744630877683) over 219 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.24, 3.69, 1.28)\n    obj.keyframe_insert(data_path=\"location\", frame=219)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 4.5, -3.1, 0.7 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.46, -3.07, 0.68))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.22, 1.22, 1.22)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -1.3, -4.0, 1.6 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-1.26, -4.00, 1.58))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.84, 1.84, 1.84)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.063716377999294, 2.2276909346355662, 3.8528051754629855) over 183 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.06, 2.23, 3.85)\n    obj.keyframe_insert(data_path=\"location\", frame=183)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -1.5, -0.8, 0.8 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-1.46, -0.81, 0.84))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.69, 1.69, 1.69)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.21416363800218, -0.7028472504456094, 0.5053770362208698) over 110 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.21, -0.70, 0.51)\n    obj.keyframe_insert(data_path=\"location\", frame=110)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 0.6, -1.0, 0.8 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.56, -0.99, 0.81))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.37, 1.37, 1.37)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.666910197818138, -3.323528593658036, 3.67989727654154) over 125 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.67, -3.32, 3.68)\n    obj.keyframe_insert(data_path=\"location\", frame=125)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.571480296412411, 3.8006322316980317, 4.366521506381321) over 72 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.57, 3.80, 4.37)\n    obj.keyframe_insert(data_path=\"location\", frame=72)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.595, 0.858, 0.995, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.013\nbsdf.inputs['Metallic'].default_value = 0.584\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.223021334375477, -3.299771370532174, 0.7635752868899109) over 139 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.22, -3.30, 0.76)\n    obj.keyframe_insert(data_path=\"location\", frame=139)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cone, sphere, cube, cylinder, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cylinder, cone, torus, plane, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 0.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location 0.8, 4.3, 1.0 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.84, 4.30, 1.01))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (1.87, 1.87, 1.87)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: SOLIDIFY, REMESH, WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.682, 0.247, 0.231, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.877\nbsdf.inputs['Metallic'].default_value = 0.088\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.317, 0.312, 0.503, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.710\nbsdf.inputs['Metallic'].default_value = 0.169\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 2.8, -3.9, 2.4 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(2.80, -3.88, 2.44))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.00, 1.00, 1.00)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.075632870478641, 1.7775127213749817, 2.7493191515811137) over 123 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.08, 1.78, 2.75)\n    obj.keyframe_insert(data_path=\"location\", frame=123)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.612, 0.919, 0.137, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.114\nbsdf.inputs['Metallic'].default_value = 0.896\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.967609261046661, -0.848210990041963, 4.461531606482816) over 132 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.97, -0.85, 4.46)\n    obj.keyframe_insert(data_path=\"location\", frame=132)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.926215072538199, 2.4642777989546882, 0.4683689651624573) over 81 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.93, 2.46, 0.47)\n    obj.keyframe_insert(data_path=\"location\", frame=81)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SIMPLE_DEFORM, DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.162594344007874, 2.9671054172657705, 0.25021306964100654) over 141 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.16, 2.97, 0.25)\n    obj.keyframe_insert(data_path=\"location\", frame=141)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.118, 0.330, 0.789, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.353\nbsdf.inputs['Metallic'].default_value = 0.717\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 4.6, 2.1, 1.3 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(4.60, 2.12, 1.33))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.48, 1.48, 1.48)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.848, 0.690, 0.548, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.712\nbsdf.inputs['Metallic'].default_value = 0.054\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SUBDIVISION_SURFACE, DISPLACE, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 2\nsubsurf_mod.render_levels = 2\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.88844172541465, -1.630852916018032, 0.06625038357802038) over 68 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.89, -1.63, 0.07)\n    obj.keyframe_insert(data_path=\"location\", frame=68)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.785, 0.510, 0.006, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.985\nbsdf.inputs['Metallic'].default_value = 0.279\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.157, 0.605, 0.057, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.693\nbsdf.inputs['Metallic'].default_value = 0.075\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.400535899015745, 3.5400234110589004, 1.0663700438106871) over 200 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.40, 3.54, 1.07)\n    obj.keyframe_insert(data_path=\"location\", frame=200)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.879, 0.681, 0.035, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.090\nbsdf.inputs['Metallic'].default_value = 0.225\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.981, 0.636, 0.427, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.654\nbsdf.inputs['Metallic'].default_value = 0.348\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.316, 0.480, 0.577, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.415\nbsdf.inputs['Metallic'].default_value = 0.210\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cone, cube, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 1.0, 2.7, 1.7 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.95, 2.74, 1.65))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.93, 1.93, 1.93)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.703488043232723, 2.096625274287237, 1.3835125547929905) over 176 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.70, 2.10, 1.38)\n    obj.keyframe_insert(data_path=\"location\", frame=176)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.446, 0.961, 0.970, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.962\nbsdf.inputs['Metallic'].default_value = 0.227\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.394012762188361, -1.527754026685134, 1.88477192082996) over 93 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.39, -1.53, 1.88)\n    obj.keyframe_insert(data_path=\"location\", frame=93)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.798011796319276, 1.5029401799384212, 4.348396336665165) over 157 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.80, 1.50, 4.35)\n    obj.keyframe_insert(data_path=\"location\", frame=157)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -2.1, -2.2, 2.3 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-2.07, -2.18, 2.30))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.97, 0.97, 0.97)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cylinder, cube, cone, plane, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: DISPLACE, REMESH, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.785663751911995, 0.6199934774312945, 4.2873321878359425) over 93 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.79, 0.62, 4.29)\n    obj.keyframe_insert(data_path=\"location\", frame=93)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.947199187965923, -4.771751436474856, 4.824701132386727) over 225 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.95, -4.77, 4.82)\n    obj.keyframe_insert(data_path=\"location\", frame=225)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cone, cylinder, cube, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 0.8, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: BOOLEAN, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, torus, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.436, 0.660, 0.603, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.478\nbsdf.inputs['Metallic'].default_value = 0.645\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.996234632311436, -0.4479153704348189, 0.8079947366895779) over 118 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.00, -0.45, 0.81)\n    obj.keyframe_insert(data_path=\"location\", frame=118)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.953, 0.486, 0.676, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.167\nbsdf.inputs['Metallic'].default_value = 0.775\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: DISPLACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: LATTICE, DISPLACE, DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.203, 0.716, 0.903, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.916\nbsdf.inputs['Metallic'].default_value = 0.799\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 4.5, -0.2, 0.5 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(4.48, -0.19, 0.52))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.63, 0.63, 0.63)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 4.3, 1.9, 1.1 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.32, 1.91, 1.13))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.10, 1.10, 1.10)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 4.8, -0.2, 0.8 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.79, -0.21, 0.82))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.73, 0.73, 0.73)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.846, 0.036, 0.911, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.395\nbsdf.inputs['Metallic'].default_value = 0.737\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.896, 0.315, 0.640, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.692\nbsdf.inputs['Metallic'].default_value = 0.969\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cone, cube, plane, sphere, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 0.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -4.2, 4.8, 2.4 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.24, 4.81, 2.37))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.82, 1.82, 1.82)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.298, 0.774, 0.013, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.042\nbsdf.inputs['Metallic'].default_value = 0.064\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.143, 0.816, 0.727, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.493\nbsdf.inputs['Metallic'].default_value = 0.740\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 1.8, -4.5, 2.9 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.81, -4.48, 2.92))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.05, 1.05, 1.05)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -3.4, 4.4, 2.7 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-3.36, 4.45, 2.72))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.10, 1.10, 1.10)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 5\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 3.2, 0.5, 0.3 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.23, 0.46, 0.30))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.25, 1.25, 1.25)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.786, 0.714, 0.874, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.962\nbsdf.inputs['Metallic'].default_value = 0.557\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.618533819631034, 4.662050944232121, 1.4584345743904048) over 235 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.62, 4.66, 1.46)\n    obj.keyframe_insert(data_path=\"location\", frame=235)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.638012646090125, -3.620759762374245, 0.8428141488632718) over 173 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.64, -3.62, 0.84)\n    obj.keyframe_insert(data_path=\"location\", frame=173)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SOLIDIFY, DECIMATE, SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 3\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, sphere, plane, cylinder, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, -1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.456435681915696, 0.35076712394162257, 4.422698222396217) over 65 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.46, 0.35, 4.42)\n    obj.keyframe_insert(data_path=\"location\", frame=65)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.95091609799706, -0.6884242128137217, 0.7534088538505673) over 200 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.95, -0.69, 0.75)\n    obj.keyframe_insert(data_path=\"location\", frame=200)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.071, 0.804, 0.979, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.992\nbsdf.inputs['Metallic'].default_value = 0.849\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.70145315616033, 2.6565253019616524, 2.594516245613512) over 203 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.70, 2.66, 2.59)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.176, 0.916, 0.507, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.755\nbsdf.inputs['Metallic'].default_value = 0.561\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.118, 0.103, 0.119, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.187\nbsdf.inputs['Metallic'].default_value = 0.652\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.438548914646239, -0.8911599326328234, 4.658262941812805) over 135 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.44, -0.89, 4.66)\n    obj.keyframe_insert(data_path=\"location\", frame=135)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 4.1, 2.8, 1.7 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(4.08, 2.76, 1.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.16, 1.16, 1.16)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.576, 0.500, 0.714, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.773\nbsdf.inputs['Metallic'].default_value = 0.616\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.265569616731158, 4.806130773338115, 3.944592216578895) over 233 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.27, 4.81, 3.94)\n    obj.keyframe_insert(data_path=\"location\", frame=233)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.307, 0.623, 0.329, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.338\nbsdf.inputs['Metallic'].default_value = 0.253\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.533606717862083, -2.734908867829784, 4.390334498880534) over 162 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.53, -2.73, 4.39)\n    obj.keyframe_insert(data_path=\"location\", frame=162)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cube, sphere, cone, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SUBDIVISION_SURFACE, BOOLEAN, ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 4\narray_mod.relative_offset_displace = (1.6, 0, 0)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: plane, sphere, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: ARRAY, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 4\narray_mod.relative_offset_displace = (1.4, 0, 0)\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.055562654525015, 1.4998383670628996, 2.5449935969858806) over 239 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.06, 1.50, 2.54)\n    obj.keyframe_insert(data_path=\"location\", frame=239)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.579, 0.082, 0.782, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.079\nbsdf.inputs['Metallic'].default_value = 0.623\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: torus, sphere, cube, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 3.5, 3.4, 1.1 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.52, 3.45, 1.11))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.72, 1.72, 1.72)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, cone, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.6419196873525745, -4.052601765055432, 4.810772803112241) over 73 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.64, -4.05, 4.81)\n    obj.keyframe_insert(data_path=\"location\", frame=73)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.143, 0.164, 0.886, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.359\nbsdf.inputs['Metallic'].default_value = 0.426\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.9012754415561535, -2.0312043960511605, 2.229990691264777) over 135 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.90, -2.03, 2.23)\n    obj.keyframe_insert(data_path=\"location\", frame=135)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: SIMPLE_DEFORM, MIRROR, LATTICE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.653, 0.780, 0.776, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.694\nbsdf.inputs['Metallic'].default_value = 0.976\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: plane, cube, cylinder, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.260474169411653, 3.1258398279108786, 2.255237721027191) over 187 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.26, 3.13, 2.26)\n    obj.keyframe_insert(data_path=\"location\", frame=187)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.754, 0.904, 0.701, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.118\nbsdf.inputs['Metallic'].default_value = 0.827\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 3\nsubsurf_mod.render_levels = 4\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.410, 0.997, 0.868, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.533\nbsdf.inputs['Metallic'].default_value = 0.952\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: DISPLACE, SIMPLE_DEFORM, MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cube, plane, torus, cylinder, sphere, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -1.3, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -0.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cube, cone, plane, sphere, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, torus, plane, cone, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n# Create cylinder 6\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(15.0, 1.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cylinder_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.345, 0.778, 0.005, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.627\nbsdf.inputs['Metallic'].default_value = 0.930\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.870, 0.531, 0.922, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.715\nbsdf.inputs['Metallic'].default_value = 0.334\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: REMESH, BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: DECIMATE, SKIN, DISPLACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.9509534253812415, -2.878414224777895, 0.7595664766175325) over 177 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.95, -2.88, 0.76)\n    obj.keyframe_insert(data_path=\"location\", frame=177)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 0.7, -3.9, 2.6 with scale 2.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.68, -3.89, 2.64))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.98, 1.98, 1.98)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 2.5, 1.5, 0.4 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(2.49, 1.54, 0.35))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.25, 1.25, 1.25)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.118, 0.877, 0.096, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.065\nbsdf.inputs['Metallic'].default_value = 0.798\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: plane, torus, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: REMESH, WIREFRAME, SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 1.6, 4.0, 1.1 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.57, 3.97, 1.13))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.80, 1.80, 1.80)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.078, 0.864, 0.671, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.531\nbsdf.inputs['Metallic'].default_value = 0.187\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.325, 0.994, 0.647, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.005\nbsdf.inputs['Metallic'].default_value = 0.140\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 0.2, -2.5, 2.0 with scale 1.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.19, -2.47, 2.01))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.67, 1.67, 1.67)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.377056343363086, -1.3537207023182098, 3.78424843874096) over 198 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.38, -1.35, 3.78)\n    obj.keyframe_insert(data_path=\"location\", frame=198)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.120478872657063, 1.6355164323059732, 4.663076032602808) over 114 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.12, 1.64, 4.66)\n    obj.keyframe_insert(data_path=\"location\", frame=114)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.552, 0.410, 0.488, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.535\nbsdf.inputs['Metallic'].default_value = 0.319\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: WAVE, MIRROR, BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.178\nbevel_mod.segments = 5\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.853, 0.098, 0.231, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.834\nbsdf.inputs['Metallic'].default_value = 0.496\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cylinder, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 2.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.075232984457389, 1.4156724332381216, 3.163336778843044) over 155 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.08, 1.42, 3.16)\n    obj.keyframe_insert(data_path=\"location\", frame=155)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.687598239394109, 3.8805711186356735, 0.1689300552939771) over 68 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.69, 3.88, 0.17)\n    obj.keyframe_insert(data_path=\"location\", frame=68)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.545, 0.152, 0.684, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.039\nbsdf.inputs['Metallic'].default_value = 0.677\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: BEVEL, WIREFRAME, DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.061\nbevel_mod.segments = 4\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: plane, cone, cube, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -0.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.034754514892878, -3.199635348633787, 1.1142582429022503) over 210 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.03, -3.20, 1.11)\n    obj.keyframe_insert(data_path=\"location\", frame=210)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -4.1, 1.5, 2.4 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-4.08, 1.48, 2.40))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.78, 1.78, 1.78)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cylinder, sphere, cone, torus, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, -1.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, 1.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.849, 0.586, 0.997, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.698\nbsdf.inputs['Metallic'].default_value = 0.033\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -4.9, 0.1, 0.3 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-4.89, 0.06, 0.32))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.23, 1.23, 1.23)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.724, 0.142, 0.731, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.253\nbsdf.inputs['Metallic'].default_value = 0.406\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SIMPLE_DEFORM, WIREFRAME, SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.539, 0.921, 0.439, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.281\nbsdf.inputs['Metallic'].default_value = 0.649\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.055014787167191, 2.121232493001396, 0.37959961861738056) over 189 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.06, 2.12, 0.38)\n    obj.keyframe_insert(data_path=\"location\", frame=189)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.102, 0.621, 0.537, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.139\nbsdf.inputs['Metallic'].default_value = 0.831\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.758212881286732, -1.4174670586212867, 4.357863895057453) over 239 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.76, -1.42, 4.36)\n    obj.keyframe_insert(data_path=\"location\", frame=239)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -3.7, 4.5, 1.6 with scale 2.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-3.68, 4.48, 1.59))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.95, 1.95, 1.95)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.687510240570493, -3.665203662431402, 2.94399601395436) over 156 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.69, -3.67, 2.94)\n    obj.keyframe_insert(data_path=\"location\", frame=156)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 1.6, -4.3, 2.5 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.58, -4.26, 2.54))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.52, 1.52, 1.52)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.208, 0.890, 0.513, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.358\nbsdf.inputs['Metallic'].default_value = 0.742\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -4.9, -1.7, 1.8 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.89, -1.73, 1.76))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.10, 1.10, 1.10)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.409, 0.136, 0.577, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.093\nbsdf.inputs['Metallic'].default_value = 0.430\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.63894227912389, 2.4478582132833493, 4.708899146440393) over 89 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.64, 2.45, 4.71)\n    obj.keyframe_insert(data_path=\"location\", frame=89)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cone, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.862, 0.600, 0.051, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.767\nbsdf.inputs['Metallic'].default_value = 0.888\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: ARRAY, CURVE, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 9\narray_mod.relative_offset_displace = (1.8, 0, 0)\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 2.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cone, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.881158033207125, -3.8297931303214305, 4.712484095648532) over 196 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.88, -3.83, 4.71)\n    obj.keyframe_insert(data_path=\"location\", frame=196)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.40373654650137, -0.20274487693996956, 3.0554074381067178) over 150 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.40, -0.20, 3.06)\n    obj.keyframe_insert(data_path=\"location\", frame=150)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.262831342414966, 1.3729740765929632, 3.404895475870924) over 155 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.26, 1.37, 3.40)\n    obj.keyframe_insert(data_path=\"location\", frame=155)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -4.0, 3.4, 1.3 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-4.04, 3.41, 1.30))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.92, 0.92, 0.92)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.256, 0.461, 0.311, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.611\nbsdf.inputs['Metallic'].default_value = 0.479\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -1.9, -2.8, 1.2 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-1.90, -2.82, 1.15))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.94, 1.94, 1.94)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: LATTICE, MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.318172947332535, 2.7916841271971524, 2.055221007059107) over 132 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.32, 2.79, 2.06)\n    obj.keyframe_insert(data_path=\"location\", frame=132)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.120, 0.436, 0.005, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.055\nbsdf.inputs['Metallic'].default_value = 0.089\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 10\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.741701448074947, 4.153542353367966, 4.071559987497214) over 60 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.74, 4.15, 4.07)\n    obj.keyframe_insert(data_path=\"location\", frame=60)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 0.6, -3.2, 1.0 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.58, -3.18, 0.97))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.41, 1.41, 1.41)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.61354377851138, 0.9940727068033546, 4.075903161933397) over 60 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.61, 0.99, 4.08)\n    obj.keyframe_insert(data_path=\"location\", frame=60)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.403, 0.597, 0.905, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.920\nbsdf.inputs['Metallic'].default_value = 0.041\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.210964301528794, -4.804423843835572, 4.890648637942208) over 228 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.21, -4.80, 4.89)\n    obj.keyframe_insert(data_path=\"location\", frame=228)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder at location -2.5, 3.7, 0.0 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(-2.52, 3.69, 0.00))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cylinder\"\n\n# Set scale\nobj.scale = (0.58, 0.58, 0.58)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.590597871411196, 4.187685759838841, 0.4043746035022766) over 218 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.59, 4.19, 0.40)\n    obj.keyframe_insert(data_path=\"location\", frame=218)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.653, 0.979, 0.131, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.062\nbsdf.inputs['Metallic'].default_value = 0.613\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cylinder, sphere, cone, torus, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n# Create cube 5\nbpy.ops.mesh.mesh_primitive_cube_add(location=(12.0, 0.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cube_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.764986009622392, 1.0603625136871422, 4.787895726100806) over 184 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.76, 1.06, 4.79)\n    obj.keyframe_insert(data_path=\"location\", frame=184)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.226643131557786, 4.01432950072992, 2.7665779035712195) over 93 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.23, 4.01, 2.77)\n    obj.keyframe_insert(data_path=\"location\", frame=93)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: plane, cube, sphere, cone, cylinder, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.8, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.9, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.9, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, -1.2, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 3.5, -3.5, 3.0 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.49, -3.49, 2.98))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.81, 0.81, 0.81)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.474, 0.207, 0.516, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.359\nbsdf.inputs['Metallic'].default_value = 0.804\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cone, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -1.8, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.513, 0.903, 0.470, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.262\nbsdf.inputs['Metallic'].default_value = 0.258\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -4.3, 1.0, 2.6 with scale 1.2"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-4.26, 1.00, 2.56))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.20, 1.20, 1.20)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.741, 0.213, 0.514, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.419\nbsdf.inputs['Metallic'].default_value = 0.926\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, sphere, cylinder, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, -0.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, 1.6, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.793, 0.441, 0.539, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.175\nbsdf.inputs['Metallic'].default_value = 0.556\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: plane, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: sphere, cube, plane, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: SOLIDIFY, SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.897, 0.514, 0.393, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.736\nbsdf.inputs['Metallic'].default_value = 0.311\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.818, 0.856, 0.327, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.753\nbsdf.inputs['Metallic'].default_value = 0.398\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.151642769686193, 1.765165297100971, 3.4588473081790387) over 188 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.15, 1.77, 3.46)\n    obj.keyframe_insert(data_path=\"location\", frame=188)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 0.3, -4.9, 1.5 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.25, -4.94, 1.50))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.12, 1.12, 1.12)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.1655484862115095, -4.218707723454539, 0.16492544647373486) over 240 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.17, -4.22, 0.16)\n    obj.keyframe_insert(data_path=\"location\", frame=240)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.916848083262476, -4.238255564348647, 1.3723120853335402) over 81 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.92, -4.24, 1.37)\n    obj.keyframe_insert(data_path=\"location\", frame=81)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 3.1, -4.2, 1.9 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.11, -4.21, 1.88))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.66, 0.66, 0.66)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -2.1, -4.0, 1.5 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-2.05, -3.95, 1.48))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.55, 1.55, 1.55)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.908699878836831, -0.9437414709083738, 4.091624523192142) over 78 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.91, -0.94, 4.09)\n    obj.keyframe_insert(data_path=\"location\", frame=78)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.498, 0.994, 0.245, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.206\nbsdf.inputs['Metallic'].default_value = 0.986\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.745, 0.049, 0.014, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.152\nbsdf.inputs['Metallic'].default_value = 0.462\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.2911401506988565, 3.1699079864902338, 2.4836173466481237) over 236 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.29, 3.17, 2.48)\n    obj.keyframe_insert(data_path=\"location\", frame=236)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: SOLIDIFY, SKIN, LATTICE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -0.4, 4.1, 2.1 with scale 1.4"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-0.37, 4.07, 2.13))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.37, 1.37, 1.37)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -0.2, 3.2, 1.6 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-0.18, 3.24, 1.62))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.56, 0.56, 0.56)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.484, 0.335, 0.247, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.059\nbsdf.inputs['Metallic'].default_value = 0.296\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cone, cylinder, sphere, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.642275822343485, -4.355308435210196, 4.8201377978053195) over 210 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.64, -4.36, 4.82)\n    obj.keyframe_insert(data_path=\"location\", frame=210)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SKIN, CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: WIREFRAME, WAVE, ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 4\narray_mod.relative_offset_displace = (1.1, 0, 0)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location 1.3, 0.6, 0.2 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(1.30, 0.64, 0.21))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.29, 1.29, 1.29)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.549092282135867, 3.5244327972949154, 4.290013244463367) over 159 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.55, 3.52, 4.29)\n    obj.keyframe_insert(data_path=\"location\", frame=159)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, plane, cube, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -1.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -0.0, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create torus 4\nbpy.ops.mesh.mesh_primitive_torus_add(location=(9.0, -2.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Torus_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: WAVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 3.8, -1.6, 2.4 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.75, -1.56, 2.41))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.79, 1.79, 1.79)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -3.4, 4.4, 2.8 with scale 1.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-3.37, 4.36, 2.82))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.89, 1.89, 1.89)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.599, 0.399, 0.532, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.954\nbsdf.inputs['Metallic'].default_value = 0.925\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cone, cylinder, sphere, plane, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, 1.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, 0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: DISPLACE, LATTICE, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.126374147954632, 2.8593479176227676, 0.5154666715333511) over 123 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.13, 2.86, 0.52)\n    obj.keyframe_insert(data_path=\"location\", frame=123)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.055811150102839, 2.4337310854052223, 3.124146383005785) over 186 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.06, 2.43, 3.12)\n    obj.keyframe_insert(data_path=\"location\", frame=186)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 0.5, 3.7, 1.5 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.48, 3.69, 1.47))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.99, 0.99, 0.99)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.239, 0.714, 0.388, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.753\nbsdf.inputs['Metallic'].default_value = 0.359\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.943460188765673, -3.401422704835527, 2.7740539831125313) over 224 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.94, -3.40, 2.77)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -0.0, 1.7, 0.7 with scale 1.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-0.01, 1.69, 0.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.64, 1.64, 1.64)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -3.7, -3.0, 1.3 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-3.65, -3.00, 1.33))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.63, 0.63, 0.63)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.521700620670785, 4.327841770439818, 4.906606855319909) over 150 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.52, 4.33, 4.91)\n    obj.keyframe_insert(data_path=\"location\", frame=150)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.763, 0.884, 0.619, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.710\nbsdf.inputs['Metallic'].default_value = 0.304\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, cylinder, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, 0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, cone, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: MIRROR, SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.543437344365834, -3.5746795129855036, 0.09555107552465247) over 227 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.54, -3.57, 0.10)\n    obj.keyframe_insert(data_path=\"location\", frame=227)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.140141499947813, -0.08995454617124121, 0.5310876154290639) over 112 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.14, -0.09, 0.53)\n    obj.keyframe_insert(data_path=\"location\", frame=112)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: plane, cube, cone, cylinder, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, -0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, 1.2, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.744813282224175, -0.8724836814762815, 1.7695548791372113) over 98 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.74, -0.87, 1.77)\n    obj.keyframe_insert(data_path=\"location\", frame=98)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.0872843551838125, 0.14592580960258772, 1.9665540136601516) over 229 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.09, 0.15, 1.97)\n    obj.keyframe_insert(data_path=\"location\", frame=229)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 0.7, -3.6, 1.6 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.66, -3.55, 1.55))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.45, 1.45, 1.45)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: BOOLEAN, BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.076\nbevel_mod.segments = 4\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cylinder, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cube, sphere, cylinder, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create sphere 2\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Sphere_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: SUBDIVISION_SURFACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, torus, plane, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -1.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 1.9, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.2, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cube, plane, sphere, cylinder, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.1, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create cone 5\nbpy.ops.mesh.mesh_primitive_cone_add(location=(12.0, -0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cone_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.790022277618203, 1.5479163916874716, 1.6357308513764006) over 224 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.79, 1.55, 1.64)\n    obj.keyframe_insert(data_path=\"location\", frame=224)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 5.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.714, 0.656, 0.684, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.003\nbsdf.inputs['Metallic'].default_value = 0.484\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: WIREFRAME, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.780789438511684, 2.8130224281424656, 1.7265173560863245) over 192 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.78, 2.81, 1.73)\n    obj.keyframe_insert(data_path=\"location\", frame=192)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 1.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 1.3, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -4.2, 4.2, 0.6 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-4.21, 4.19, 0.60))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (0.95, 0.95, 0.95)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.218203604153855, -2.3354247092604465, 3.9976570651657113) over 96 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.22, -2.34, 4.00)\n    obj.keyframe_insert(data_path=\"location\", frame=96)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: DISPLACE, BEVEL, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.125\nbevel_mod.segments = 2\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 4.2, 1.5, 1.9 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(4.16, 1.46, 1.85))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.78, 1.78, 1.78)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: REMESH, BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.628, 0.147, 0.994, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.068\nbsdf.inputs['Metallic'].default_value = 0.568\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.063, 0.894, 0.147, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.944\nbsdf.inputs['Metallic'].default_value = 0.051\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.532, 0.726, 0.369, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.883\nbsdf.inputs['Metallic'].default_value = 0.280\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: SUBDIVISION_SURFACE, BEVEL, MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.032\nbevel_mod.segments = 2\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.7\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, cone, plane, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 0.7, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 0.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, 1.3, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.640465407865053, 1.0825591831983692, 0.5600757599073153) over 238 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.64, 1.08, 0.56)\n    obj.keyframe_insert(data_path=\"location\", frame=238)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: CURVE, SUBDIVISION_SURFACE, ARRAY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add Subdivision Surface modifier\nsubsurf_mod = obj.modifiers.new(name=\"Subdivision\", type='SUBSURF')\nsubsurf_mod.levels = 1\nsubsurf_mod.render_levels = 2\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 6\narray_mod.relative_offset_displace = (1.3, 0, 0)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: CURVE, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.988407165512701, 0.718528688016411, 3.2518487849647015) over 89 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.99, 0.72, 3.25)\n    obj.keyframe_insert(data_path=\"location\", frame=89)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.918, 0.717, 0.046, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.215\nbsdf.inputs['Metallic'].default_value = 0.896\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.411, 0.279, 0.183, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.707\nbsdf.inputs['Metallic'].default_value = 0.483\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location 1.0, 1.2, 0.8 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(1.02, 1.18, 0.81))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.32, 1.32, 1.32)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 4.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.711, 0.998, 0.372, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.335\nbsdf.inputs['Metallic'].default_value = 0.923\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: cone, cube, sphere, cylinder, plane, torus"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cone 1\nbpy.ops.mesh.mesh_primitive_cone_add(location=(0.0, -1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cone_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -0.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n# Create plane 5\nbpy.ops.mesh.mesh_primitive_plane_add(location=(12.0, 0.4, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Plane_5\" \n# Create torus 6\nbpy.ops.mesh.mesh_primitive_torus_add(location=(15.0, 1.3, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Torus_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 6.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.114026570835762, -2.727717979998655, 3.8615487674433746) over 64 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.11, -2.73, 3.86)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: MIRROR"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Mirror modifier\nmirror_mod = obj.modifiers.new(name=\"Mirror\", type='MIRROR')\nmirror_mod.use_axis = (True, False, False)\nmirror_mod.use_clip = True\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: LATTICE, CURVE, REMESH"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n# Add REMESH modifier\nmod = obj.modifiers.new(name=\"REMESH\", type='REMESH')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.210, 0.480, 0.355, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.086\nbsdf.inputs['Metallic'].default_value = 0.027\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.306945755151712, 1.5626245250884487, 3.603966706806652) over 124 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.31, 1.56, 3.60)\n    obj.keyframe_insert(data_path=\"location\", frame=124)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.753689295295736, 3.436892955748835, 2.7544661523588356) over 208 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.75, 3.44, 2.75)\n    obj.keyframe_insert(data_path=\"location\", frame=208)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.753, 0.816, 0.768, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.202\nbsdf.inputs['Metallic'].default_value = 0.777\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.018367861470976, 1.5759753309970437, 2.6090557616277668) over 230 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.02, 1.58, 2.61)\n    obj.keyframe_insert(data_path=\"location\", frame=230)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.836177028919016, 4.326899984125841, 4.393945794010479) over 217 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.84, 4.33, 4.39)\n    obj.keyframe_insert(data_path=\"location\", frame=217)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.014, 0.386, 0.270, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.144\nbsdf.inputs['Metallic'].default_value = 0.999\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: torus, cylinder, plane, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, 1.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -4.6, 0.7, 2.8 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-4.61, 0.70, 2.78))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.12, 1.12, 1.12)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.646, 0.978, 0.410, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.791\nbsdf.inputs['Metallic'].default_value = 0.287\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: WIREFRAME, LATTICE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add LATTICE modifier\nmod = obj.modifiers.new(name=\"LATTICE\", type='LATTICE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.578, 0.081, 0.439, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.877\nbsdf.inputs['Metallic'].default_value = 0.525\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -4.8, -4.1, 0.8 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-4.83, -4.12, 0.78))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (0.85, 0.85, 0.85)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 1.4, -2.3, 2.6 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(1.43, -2.34, 2.56))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (1.55, 1.55, 1.55)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: sphere, cube, cylinder, plane, torus, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -0.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n# Create torus 5\nbpy.ops.mesh.mesh_primitive_torus_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Torus_5\" \n# Create cone 6\nbpy.ops.mesh.mesh_primitive_cone_add(location=(15.0, -0.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cone_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -1.8, -2.0, 1.5 with scale 1.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-1.83, -1.95, 1.48))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (1.83, 1.83, 1.83)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.3687187546959825, 1.6635435799783505, 0.33107257145535085) over 227 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.37, 1.66, 0.33)\n    obj.keyframe_insert(data_path=\"location\", frame=227)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: plane, torus, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 0.4, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.6, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.7, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -2.0, -4.8, 0.5 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-2.01, -4.84, 0.52))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.81, 0.81, 0.81)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.661, 0.005, 0.043, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.262\nbsdf.inputs['Metallic'].default_value = 0.146\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: WIREFRAME, WAVE, SKIN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.132, 0.585, 0.529, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.219\nbsdf.inputs['Metallic'].default_value = 0.934\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, plane, torus, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: DECIMATE, BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.122\nbevel_mod.segments = 3\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.2\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: WAVE, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add WAVE modifier\nmod = obj.modifiers.new(name=\"WAVE\", type='WAVE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.278197475258533, 3.3224264427066057, 2.8105763761479126) over 203 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.28, 3.32, 2.81)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.779, 0.119, 0.734, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.875\nbsdf.inputs['Metallic'].default_value = 0.409\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.023\nbevel_mod.segments = 2\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: cube, plane, cone"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 0.2, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, 0.7, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -1.1, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.244, 0.230, 0.738, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.979\nbsdf.inputs['Metallic'].default_value = 0.441\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone and apply these modifiers: BEVEL, SOLIDIFY, CURVE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add()\nobj = bpy.context.active_object\nobj.name = \"Cone_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.153\nbevel_mod.segments = 4\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n# Add CURVE modifier\nmod = obj.modifiers.new(name=\"CURVE\", type='CURVE')\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: torus, plane, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create plane 2\nbpy.ops.mesh.mesh_primitive_plane_add(location=(3.0, -0.9, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Plane_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -0.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane and apply these modifiers: BEVEL"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add()\nobj = bpy.context.active_object\nobj.name = \"Plane_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.036\nbevel_mod.segments = 4\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.4\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: torus, cylinder, cube, cone, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -1.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, -0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create cube 3\nbpy.ops.mesh.mesh_primitive_cube_add(location=(6.0, -1.2, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cube_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 0.7, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -2.0, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.330704494486458, -2.1740981219072775, 3.5897285185125987) over 90 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.33, -2.17, 3.59)\n    obj.keyframe_insert(data_path=\"location\", frame=90)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.673, 0.328, 0.779, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.477\nbsdf.inputs['Metallic'].default_value = 0.757\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a green, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Green_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.649, 0.847, 0.321, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.860\nbsdf.inputs['Metallic'].default_value = 0.349\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.275189634341846, 2.526401808250773, 4.724145435196105) over 102 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.28, 2.53, 4.72)\n    obj.keyframe_insert(data_path=\"location\", frame=102)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.253562471075005, 2.373023231260902, 2.4156795925787744) over 115 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.25, 2.37, 2.42)\n    obj.keyframe_insert(data_path=\"location\", frame=115)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.695, 0.182, 0.341, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.510\nbsdf.inputs['Metallic'].default_value = 0.362\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BOOLEAN"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add BOOLEAN modifier\nmod = obj.modifiers.new(name=\"BOOLEAN\", type='BOOLEAN')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.791, 0.042, 0.655, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.310\nbsdf.inputs['Metallic'].default_value = 0.738\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cylinder and apply these modifiers: DECIMATE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cylinder\nbpy.ops.mesh.mesh_primitive_cylinder_add()\nobj = bpy.context.active_object\nobj.name = \"Cylinder_Modified\"\n\n# Add DECIMATE modifier\nmod = obj.modifiers.new(name=\"DECIMATE\", type='DECIMATE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.350781550344978, 2.6028498094385633, 4.440063000157975) over 152 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.35, 2.60, 4.44)\n    obj.keyframe_insert(data_path=\"location\", frame=152)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: ARRAY, WIREFRAME"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add Array modifier\narray_mod = obj.modifiers.new(name=\"Array\", type='ARRAY')\narray_mod.count = 5\narray_mod.relative_offset_displace = (1.5, 0, 0)\n# Add WIREFRAME modifier\nmod = obj.modifiers.new(name=\"WIREFRAME\", type='WIREFRAME')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.0\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location 0.7, 3.0, 1.5 with scale 1.3"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.71, 3.03, 1.54))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.30, 1.30, 1.30)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.453, 0.974, 0.929, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.574\nbsdf.inputs['Metallic'].default_value = 0.913\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.078991240652904, 3.7704718136068553, 1.2365998280314927) over 208 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.08, 3.77, 1.24)\n    obj.keyframe_insert(data_path=\"location\", frame=208)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 2.1, 2.3, 2.9 with scale 0.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(2.07, 2.27, 2.88))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.52, 0.52, 0.52)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube and apply these modifiers: DISPLACE"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add()\nobj = bpy.context.active_object\nobj.name = \"Cube_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 6 objects: torus, cylinder, plane, cone, sphere, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, -0.3, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, -1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create sphere 5\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(12.0, -0.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Sphere_5\" \n# Create cube 6\nbpy.ops.mesh.mesh_primitive_cube_add(location=(15.0, -1.5, 0.0))\nobj_5 = bpy.context.active_object\nobj_5.name = \"Cube_6\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.037, 0.056, 0.599, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.866\nbsdf.inputs['Metallic'].default_value = 0.750\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.374, 0.962, 0.931, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.666\nbsdf.inputs['Metallic'].default_value = 0.297\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.371232736498822, 0.12137987016431673, 3.5799880752865243) over 221 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.37, 0.12, 3.58)\n    obj.keyframe_insert(data_path=\"location\", frame=221)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: torus, cone, cylinder, cube"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create torus 1\nbpy.ops.mesh.mesh_primitive_torus_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Torus_1\" \n# Create cone 2\nbpy.ops.mesh.mesh_primitive_cone_add(location=(3.0, 1.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cone_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, -1.4, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n# Create cube 4\nbpy.ops.mesh.mesh_primitive_cube_add(location=(9.0, -0.1, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cube_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.959244255213334, -2.1324349621123826, 1.604907148516404) over 149 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.96, -2.13, 1.60)\n    obj.keyframe_insert(data_path=\"location\", frame=149)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 3 objects: sphere, cube, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, -0.5, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create cylinder 3\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cylinder_3\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.244667811065305, 0.6941474809269206, 2.775848265126138) over 156 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.24, 0.69, 2.78)\n    obj.keyframe_insert(data_path=\"location\", frame=156)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a gray, smooth, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Gray_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.382, 0.683, 0.005, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.000\nbsdf.inputs['Metallic'].default_value = 0.075\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.5321179128940985, 2.087246554065395, 0.7867301909342989) over 64 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.53, 2.09, 0.79)\n    obj.keyframe_insert(data_path=\"location\", frame=64)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.691414586791284, -4.211455030364713, 1.6449038705521857) over 135 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.69, -4.21, 1.64)\n    obj.keyframe_insert(data_path=\"location\", frame=135)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, smooth, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.700, 0.585, 0.889, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.347\nbsdf.inputs['Metallic'].default_value = 0.749\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.851774936026297, 1.7412019998568793, 2.855318032997931) over 149 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.85, 1.74, 2.86)\n    obj.keyframe_insert(data_path=\"location\", frame=149)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -3.5, -1.8, 0.8 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-3.51, -1.76, 0.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.65, 0.65, 0.65)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: plane, cube, sphere, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create plane 1\nbpy.ops.mesh.mesh_primitive_plane_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Plane_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, 0.4, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, -1.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, 0.7, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 1.6\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Magic texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Magic_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexMagic')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 9.8\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere and apply these modifiers: BEVEL, SKIN, SOLIDIFY"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add()\nobj = bpy.context.active_object\nobj.name = \"Sphere_Modified\"\n\n# Add Bevel modifier\nbevel_mod = obj.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_mod.width = 0.171\nbevel_mod.segments = 2\n# Add SKIN modifier\nmod = obj.modifiers.new(name=\"SKIN\", type='SKIN')\n# Add SOLIDIFY modifier\nmod = obj.modifiers.new(name=\"SOLIDIFY\", type='SOLIDIFY')\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Noise texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Noise_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexNoise')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.9\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location -4.4, -1.5, 0.3 with scale 0.9"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(-4.45, -1.55, 0.33))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.89, 0.89, 0.89)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cube at location 2.2, 1.3, 3.0 with scale 0.6"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cube\nbpy.ops.mesh.mesh_primitive_cube_add(location=(2.21, 1.27, 2.98))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cube\"\n\n# Set scale\nobj.scale = (0.58, 0.58, 0.58)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.027690567900238, 2.347971248785643, 2.1038452144186697) over 201 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.03, 2.35, 2.10)\n    obj.keyframe_insert(data_path=\"location\", frame=201)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a blue, rough, metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Blue_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.597, 0.324, 0.956, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.866\nbsdf.inputs['Metallic'].default_value = 0.555\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.799812451813171, 2.7338427705423456, 1.9083290993922146) over 70 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.80, 2.73, 1.91)\n    obj.keyframe_insert(data_path=\"location\", frame=70)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a red, rough, non-metallic material"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Red_Material\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\nbsdf.inputs['Base Color'].default_value = (0.974, 0.713, 0.429, 1.0)\nbsdf.inputs['Roughness'].default_value = 0.670\nbsdf.inputs['Metallic'].default_value = 0.209\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (7.231426284419681, -1.263914541569421, 0.6826204003663799) over 179 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (7.23, -1.26, 0.68)\n    obj.keyframe_insert(data_path=\"location\", frame=179)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a cone at location -3.3, 3.1, 2.4 with scale 1.5"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create cone\nbpy.ops.mesh.mesh_primitive_cone_add(location=(-3.28, 3.05, 2.44))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Cone\"\n\n# Set scale\nobj.scale = (1.54, 1.54, 1.54)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, torus, cone, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, -0.9, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create cone 3\nbpy.ops.mesh.mesh_primitive_cone_add(location=(6.0, -0.8, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Cone_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, -1.6, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (8.055990662673821, -2.116186964269129, 2.0091205071081717) over 229 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (8.06, -2.12, 2.01)\n    obj.keyframe_insert(data_path=\"location\", frame=229)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (9.546693945963135, -1.7195653183162554, 0.7064435608589092) over 124 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (9.55, -1.72, 0.71)\n    obj.keyframe_insert(data_path=\"location\", frame=124)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus and apply these modifiers: DISPLACE, SIMPLE_DEFORM"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add()\nobj = bpy.context.active_object\nobj.name = \"Torus_Modified\"\n\n# Add DISPLACE modifier\nmod = obj.modifiers.new(name=\"DISPLACE\", type='DISPLACE')\n# Add SIMPLE_DEFORM modifier\nmod = obj.modifiers.new(name=\"SIMPLE_DEFORM\", type='SIMPLE_DEFORM')\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.486326160659425, 0.9383394112480037, 3.415789206928612) over 190 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.49, 0.94, 3.42)\n    obj.keyframe_insert(data_path=\"location\", frame=190)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a torus at location -3.2, -1.7, 2.2 with scale 1.0"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create torus\nbpy.ops.mesh.mesh_primitive_torus_add(location=(-3.25, -1.73, 2.22))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Torus\"\n\n# Set scale\nobj.scale = (1.03, 1.03, 1.03)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Wave texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Wave_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexWave')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 7.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: sphere, cube, torus, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create sphere 1\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(0.0, 0.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Sphere_1\" \n# Create cube 2\nbpy.ops.mesh.mesh_primitive_cube_add(location=(3.0, -1.1, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cube_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 0.6, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create cylinder 4\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(9.0, -1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cylinder_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 8.1\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cube, cylinder, torus, sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, -1.6, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create cylinder 2\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(3.0, 1.5, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Cylinder_2\" \n# Create torus 3\nbpy.ops.mesh.mesh_primitive_torus_add(location=(6.0, 1.3, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Torus_3\" \n# Create sphere 4\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(9.0, -1.5, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Sphere_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 4 objects: cylinder, torus, sphere, plane"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cylinder 1\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(0.0, 1.8, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cylinder_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 1.0, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create sphere 3\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(6.0, 0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Sphere_3\" \n# Create plane 4\nbpy.ops.mesh.mesh_primitive_plane_add(location=(9.0, 1.0, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Plane_4\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.476718321686011, -1.3941666035526303, 0.5467148980639169) over 203 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.48, -1.39, 0.55)\n    obj.keyframe_insert(data_path=\"location\", frame=203)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location 1.5, -1.2, 0.1 with scale 0.7"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(1.48, -1.16, 0.07))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (0.65, 0.65, 0.65)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a sphere at location -2.0, 2.6, 0.8 with scale 1.1"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create sphere\nbpy.ops.mesh.mesh_primitive_uv_sphere_add(location=(-2.03, 2.61, 0.75))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Sphere\"\n\n# Set scale\nobj.scale = (1.07, 1.07, 1.07)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 3.5\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender geometry expert. Generate precise Python code for creating 3D objects, applying modifiers, and manipulating mesh geometry. Always use bpy.ops and bpy.data correctly.", "messages": [{"role": "user", "content": "Create a plane at location -4.5, -4.9, 0.6 with scale 0.8"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create plane\nbpy.ops.mesh.mesh_primitive_plane_add(location=(-4.49, -4.86, 0.58))\n\n# Get the active object\nobj = bpy.context.active_object\nobj.name = \"Plane\"\n\n# Set scale\nobj.scale = (0.78, 0.78, 0.78)\n```"}]}
{"system": "You are a Blender material expert. Create shader node networks, PBR materials, and procedural textures using Blender's node system. Output clean, efficient Python code.", "messages": [{"role": "user", "content": "Create a procedural material using Voronoi texture"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Create new material\nmat = bpy.data.materials.new(name=\"Voronoi_Procedural\")\nmat.use_nodes = True\nnodes = mat.node_tree.nodes\nlinks = mat.node_tree.links\n\n# Clear default nodes\nnodes.clear()\n\n# Add texture node\ntex = nodes.new('ShaderNodeTexVoronoi')\ntex.location = (-400, 0)\ntex.inputs['Scale'].default_value = 2.3\n\n# Add ColorRamp for control\nramp = nodes.new('ShaderNodeValToRGB')\nramp.location = (-200, 0)\n\n# Add Principled BSDF\nbsdf = nodes.new('ShaderNodeBsdfPrincipled')\nbsdf.location = (0, 0)\n\n# Add Material Output\noutput = nodes.new('ShaderNodeOutputMaterial')\noutput.location = (300, 0)\n\n# Link nodes\nlinks.new(tex.outputs[0], ramp.inputs['Fac'])\nlinks.new(ramp.outputs['Color'], bsdf.inputs['Base Color'])\nlinks.new(bsdf.outputs['BSDF'], output.inputs['Surface'])\n\n# Assign to active object\nif bpy.context.active_object:\n    bpy.context.active_object.data.materials.append(mat)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (5.578443003996094, 1.8127555463538805, 0.17703676189239015) over 103 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (5.58, 1.81, 0.18)\n    obj.keyframe_insert(data_path=\"location\", frame=103)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
{"system": "You are a Blender scene expert. Organize objects into collections, set up render settings, and create complete scene compositions.", "messages": [{"role": "user", "content": "Create a scene with 5 objects: cube, torus, plane, cone, cylinder"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Clear existing objects\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create cube 1\nbpy.ops.mesh.mesh_primitive_cube_add(location=(0.0, 1.0, 0.0))\nobj_0 = bpy.context.active_object\nobj_0.name = \"Cube_1\" \n# Create torus 2\nbpy.ops.mesh.mesh_primitive_torus_add(location=(3.0, 0.2, 0.0))\nobj_1 = bpy.context.active_object\nobj_1.name = \"Torus_2\" \n# Create plane 3\nbpy.ops.mesh.mesh_primitive_plane_add(location=(6.0, -0.5, 0.0))\nobj_2 = bpy.context.active_object\nobj_2.name = \"Plane_3\" \n# Create cone 4\nbpy.ops.mesh.mesh_primitive_cone_add(location=(9.0, 1.4, 0.0))\nobj_3 = bpy.context.active_object\nobj_3.name = \"Cone_4\" \n# Create cylinder 5\nbpy.ops.mesh.mesh_primitive_cylinder_add(location=(12.0, -1.5, 0.0))\nobj_4 = bpy.context.active_object\nobj_4.name = \"Cylinder_5\" \n\n# Create collection\ncollection = bpy.data.collections.new(\"Scene_Objects\")\nbpy.context.scene.collection.children.link(collection)\n```"}]}
{"system": "You are a Blender animation expert. Create keyframe animations, use F-curves, and set up complex motion using Blender's animation system.", "messages": [{"role": "user", "content": "Animate an object moving from (0, 0, 0) to (6.5234888521773335, -4.8602765516073845, 2.1533416657906135) over 228 frames"}, {"role": "assistant", "content": "```python\nimport bpy\n\n# Get active object\nobj = bpy.context.active_object\n\nif obj:\n    # Set start location and keyframe\n    obj.location = (0, 0, 0)\n    obj.keyframe_insert(data_path=\"location\", frame=1)\n\n    # Set end location and keyframe\n    obj.location = (6.52, -4.86, 2.15)\n    obj.keyframe_insert(data_path=\"location\", frame=228)\n\n    # Set interpolation to Bezier for smooth motion\n    if obj.animation_data and obj.animation_data.action:\n        for fcurve in obj.animation_data.action.fcurves:\n            for keyframe in fcurve.keyframe_points:\n                keyframe.interpolation = 'BEZIER'\n```"}]}
