"""Rigging agent for creating armatures and bone systems."""

import logging
from typing import Dict, Any

from agency3d.core.agent import Agent, AgentRole, AgentConfig

logger = logging.getLogger(__name__)


class RiggingAgent(Agent):
    """Agent responsible for creating armatures, bones, and rigging systems."""

    def __init__(self, config: AgentConfig, context=None):
        super().__init__(AgentRole.RIGGING, config, context)

    def get_system_prompt(self) -> str:
        """Get the system prompt for the rigging agent."""
        return """You are a Blender rigging expert. Your job is to create armatures, bones, and rigging systems for 3D models.

## Your Capabilities:
- Create armatures with proper bone hierarchies
- Set up IK (Inverse Kinematics) constraints
- Implement weight painting for mesh deformation
- Create pose libraries and animation rigs
- Add bone constraints and drivers
- Set up facial rigs and body rigs

## Blender API for Rigging:

### Creating Armatures:
```python
# Add armature object
bpy.ops.object.armature_add(location=(0, 0, 0))
armature = bpy.context.active_object
armature.name = "Rig"

# Enter edit mode to add bones
bpy.ops.object.mode_set(mode='EDIT')
armature.data.edit_bones.new("Root")
armature.data.edit_bones.new("Spine")
armature.data.edit_bones.new("Head")
```

### Bone Hierarchy:
```python
# Set up parent-child relationships
root = armature.data.edit_bones["Root"]
spine = armature.data.edit_bones["Spine"]
head = armature.data.edit_bones["Head"]

spine.parent = root
head.parent = spine

# Position bones
root.head = (0, 0, 0)
root.tail = (0, 0, 0.1)
spine.head = (0, 0, 0.1)
spine.tail = (0, 0, 1.0)
head.head = (0, 0, 1.0)
head.tail = (0, 0, 1.2)
```

### IK Constraints:
```python
# Add IK constraint to bone
bpy.ops.object.mode_set(mode='POSE')
bone = armature.pose.bones["Spine"]
constraint = bone.constraints.new(type='IK')
constraint.target = target_object
constraint.chain_length = 2
```

### Weight Painting:
```python
# Select mesh and enter weight paint mode
bpy.context.view_layer.objects.active = mesh_object
bpy.ops.object.mode_set(mode='WEIGHT_PAINT')

# Add armature modifier
modifier = mesh_object.modifiers.new(name="Armature", type='ARMATURE')
modifier.object = armature
```

## Guidelines:
1. Create logical bone hierarchies (root -> spine -> head, etc.)
2. Use descriptive bone names
3. Position bones appropriately for the character/object
4. Set up IK constraints for realistic movement
5. Ensure proper weight painting for smooth deformation
6. Add drivers for automatic bone movement
7. Create pose libraries for common poses

Generate complete, working Blender Python scripts that create the requested rigging system."""

    def generate_script(self, scene_description: str, context: Dict[str, Any]) -> str:
        """Generate a Blender script for rigging based on the scene description."""
        try:
            # Extract rigging requirements from scene description
            rigging_prompt = self._extract_rigging_requirements(scene_description, context)
            
            # Generate the rigging script
            script = f"""# Rigging Script Generated by Voxel RiggingAgent
# Scene: {scene_description}

import bpy
import bmesh
from mathutils import Vector, Euler

# Clear existing mesh objects (keep lights, cameras)
bpy.ops.object.select_all(action='DESELECT')
for obj in bpy.context.scene.objects:
    if obj.type == 'MESH':
        obj.select_set(True)
bpy.ops.object.delete(use_global=False)

# Create base mesh for rigging (if needed)
{self._create_base_mesh_script(scene_description)}

# Create armature
bpy.ops.object.armature_add(location=(0, 0, 0))
armature = bpy.context.active_object
armature.name = "Character_Rig"

# Enter edit mode to create bones
bpy.ops.object.mode_set(mode='EDIT')

{self._generate_bone_hierarchy(scene_description)}

# Exit edit mode
bpy.ops.object.mode_set(mode='OBJECT')

# Set up armature modifier for mesh objects
{self._setup_armature_modifiers()}

# Create pose library
{self._create_pose_library(scene_description)}

# Add bone constraints and drivers
{self._add_bone_constraints(scene_description)}

print("Rigging setup complete!")
"""
            
            return script
            
        except Exception as e:
            logger.error(f"Error generating rigging script: {e}")
            return f"# Error generating rigging script: {e}"

    def _extract_rigging_requirements(self, scene_description: str, context: Dict[str, Any]) -> str:
        """Extract rigging requirements from scene description."""
        requirements = []
        
        # Check for character-related keywords
        character_keywords = ['character', 'person', 'human', 'figure', 'body', 'head', 'arms', 'legs']
        if any(keyword in scene_description.lower() for keyword in character_keywords):
            requirements.append("humanoid character rig")
        
        # Check for animal keywords
        animal_keywords = ['animal', 'creature', 'beast', 'quadruped', 'bird', 'fish']
        if any(keyword in scene_description.lower() for keyword in animal_keywords):
            requirements.append("animal rig")
        
        # Check for mechanical keywords
        mechanical_keywords = ['robot', 'mechanical', 'machine', 'vehicle', 'armor']
        if any(keyword in scene_description.lower() for keyword in mechanical_keywords):
            requirements.append("mechanical rig")
        
        # Check for facial animation
        facial_keywords = ['face', 'facial', 'expression', 'emotion', 'mouth', 'eyes']
        if any(keyword in scene_description.lower() for keyword in facial_keywords):
            requirements.append("facial rig")
        
        return ", ".join(requirements) if requirements else "basic rig"

    def _create_base_mesh_script(self, scene_description: str) -> str:
        """Generate script to create base mesh for rigging."""
        if 'character' in scene_description.lower() or 'human' in scene_description.lower():
            return """
# Create basic humanoid mesh
bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))
body = bpy.context.active_object
body.name = "Body"
body.scale = (0.8, 0.4, 1.2)

# Add head
bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2.2))
head = bpy.context.active_object
head.name = "Head"

# Add arms
bpy.ops.mesh.primitive_cube_add(size=1, location=(0.8, 0, 1.5))
left_arm = bpy.context.active_object
left_arm.name = "Left_Arm"
left_arm.scale = (0.3, 0.3, 1.0)

bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.8, 0, 1.5))
right_arm = bpy.context.active_object
right_arm.name = "Right_Arm"
right_arm.scale = (0.3, 0.3, 1.0)

# Add legs
bpy.ops.mesh.primitive_cube_add(size=1, location=(0.3, 0, 0.2))
left_leg = bpy.context.active_object
left_leg.name = "Left_Leg"
left_leg.scale = (0.3, 0.3, 1.0)

bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.3, 0, 0.2))
right_leg = bpy.context.active_object
right_leg.name = "Right_Leg"
right_leg.scale = (0.3, 0.3, 1.0)
"""
        else:
            return """
# Create basic mesh for rigging
bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))
base_mesh = bpy.context.active_object
base_mesh.name = "Base_Mesh"
"""

    def _generate_bone_hierarchy(self, scene_description: str) -> str:
        """Generate bone hierarchy based on scene description."""
        if 'character' in scene_description.lower() or 'human' in scene_description.lower():
            return """
# Create humanoid bone hierarchy
root = armature.data.edit_bones.new("Root")
root.head = (0, 0, 0)
root.tail = (0, 0, 0.1)

# Spine chain
spine1 = armature.data.edit_bones.new("Spine1")
spine1.head = (0, 0, 0.1)
spine1.tail = (0, 0, 0.5)
spine1.parent = root

spine2 = armature.data.edit_bones.new("Spine2")
spine2.head = (0, 0, 0.5)
spine2.tail = (0, 0, 1.0)
spine2.parent = spine1

chest = armature.data.edit_bones.new("Chest")
chest.head = (0, 0, 1.0)
chest.tail = (0, 0, 1.2)
chest.parent = spine2

# Head
head = armature.data.edit_bones.new("Head")
head.head = (0, 0, 1.2)
head.tail = (0, 0, 1.5)
head.parent = chest

# Arms
left_shoulder = armature.data.edit_bones.new("Left_Shoulder")
left_shoulder.head = (0, 0, 1.1)
left_shoulder.tail = (0.3, 0, 1.1)
left_shoulder.parent = chest

left_arm = armature.data.edit_bones.new("Left_Arm")
left_arm.head = (0.3, 0, 1.1)
left_arm.tail = (0.6, 0, 1.1)
left_arm.parent = left_shoulder

left_forearm = armature.data.edit_bones.new("Left_Forearm")
left_forearm.head = (0.6, 0, 1.1)
left_forearm.tail = (0.9, 0, 1.1)
left_forearm.parent = left_arm

left_hand = armature.data.edit_bones.new("Left_Hand")
left_hand.head = (0.9, 0, 1.1)
left_hand.tail = (1.0, 0, 1.1)
left_hand.parent = left_forearm

# Right arm (mirror)
right_shoulder = armature.data.edit_bones.new("Right_Shoulder")
right_shoulder.head = (0, 0, 1.1)
right_shoulder.tail = (-0.3, 0, 1.1)
right_shoulder.parent = chest

right_arm = armature.data.edit_bones.new("Right_Arm")
right_arm.head = (-0.3, 0, 1.1)
right_arm.tail = (-0.6, 0, 1.1)
right_arm.parent = right_shoulder

right_forearm = armature.data.edit_bones.new("Right_Forearm")
right_forearm.head = (-0.6, 0, 1.1)
right_forearm.tail = (-0.9, 0, 1.1)
right_forearm.parent = right_arm

right_hand = armature.data.edit_bones.new("Right_Hand")
right_hand.head = (-0.9, 0, 1.1)
right_hand.tail = (-1.0, 0, 1.1)
right_hand.parent = right_forearm

# Legs
left_thigh = armature.data.edit_bones.new("Left_Thigh")
left_thigh.head = (0.2, 0, 0.1)
left_thigh.tail = (0.2, 0, 0.5)
left_thigh.parent = root

left_shin = armature.data.edit_bones.new("Left_Shin")
left_shin.head = (0.2, 0, 0.5)
left_shin.tail = (0.2, 0, 0.8)
left_shin.parent = left_thigh

left_foot = armature.data.edit_bones.new("Left_Foot")
left_foot.head = (0.2, 0, 0.8)
left_foot.tail = (0.2, 0.2, 0.8)
left_foot.parent = left_shin

# Right leg (mirror)
right_thigh = armature.data.edit_bones.new("Right_Thigh")
right_thigh.head = (-0.2, 0, 0.1)
right_thigh.tail = (-0.2, 0, 0.5)
right_thigh.parent = root

right_shin = armature.data.edit_bones.new("Right_Shin")
right_shin.head = (-0.2, 0, 0.5)
right_shin.tail = (-0.2, 0, 0.8)
right_shin.parent = right_thigh

right_foot = armature.data.edit_bones.new("Right_Foot")
right_foot.head = (-0.2, 0, 0.8)
right_foot.tail = (-0.2, -0.2, 0.8)
right_foot.parent = right_shin
"""
        else:
            return """
# Create basic bone hierarchy
root = armature.data.edit_bones.new("Root")
root.head = (0, 0, 0)
root.tail = (0, 0, 0.1)

# Add main bone
main_bone = armature.data.edit_bones.new("Main_Bone")
main_bone.head = (0, 0, 0.1)
main_bone.tail = (0, 0, 1.0)
main_bone.parent = root
"""

    def _setup_armature_modifiers(self) -> str:
        """Generate script to set up armature modifiers."""
        return """
# Set up armature modifiers for all mesh objects
for obj in bpy.context.scene.objects:
    if obj.type == 'MESH':
        # Add armature modifier
        modifier = obj.modifiers.new(name="Armature", type='ARMATURE')
        modifier.object = armature
        
        # Set up automatic weights
        bpy.context.view_layer.objects.active = obj
        bpy.ops.object.mode_set(mode='WEIGHT_PAINT')
        bpy.ops.object.mode_set(mode='OBJECT')
"""

    def _create_pose_library(self, scene_description: str) -> str:
        """Generate script to create pose library."""
        return """
# Create pose library
bpy.ops.object.mode_set(mode='POSE')

# Create default pose
bpy.ops.pose.select_all(action='SELECT')
bpy.ops.pose.transforms_clear()

# Create T-pose
left_arm_bone = armature.pose.bones.get("Left_Arm")
if left_arm_bone:
    left_arm_bone.rotation_euler = (0, 0, 1.57)  # 90 degrees

right_arm_bone = armature.pose.bones.get("Right_Arm")
if right_arm_bone:
    right_arm_bone.rotation_euler = (0, 0, -1.57)  # -90 degrees

# Store pose
bpy.ops.pose.select_all(action='SELECT')
bpy.ops.pose.pose_add(frame=1)

print("Pose library created with T-pose")
"""

    def _add_bone_constraints(self, scene_description: str) -> str:
        """Generate script to add bone constraints and drivers."""
        return """
# Add IK constraints for legs
bpy.ops.object.mode_set(mode='POSE')

# Left leg IK
left_shin_bone = armature.pose.bones.get("Left_Shin")
if left_shin_bone:
    ik_constraint = left_shin_bone.constraints.new(type='IK')
    ik_constraint.chain_length = 2
    ik_constraint.use_location = True
    ik_constraint.use_rotation = True

# Right leg IK
right_shin_bone = armature.pose.bones.get("Right_Shin")
if right_shin_bone:
    ik_constraint = right_shin_bone.constraints.new(type='IK')
    ik_constraint.chain_length = 2
    ik_constraint.use_location = True
    ik_constraint.use_rotation = True

# Add bone drivers for automatic movement
bpy.ops.object.mode_set(mode='OBJECT')

# Create driver for head movement
head_bone = armature.pose.bones.get("Head")
if head_bone:
    driver = head_bone.driver_add("rotation_euler", 2)  # Z rotation
    driver.driver.expression = "sin(frame * 0.1) * 0.1"  # Gentle swaying

print("Bone constraints and drivers added")
"""
    
    def _parse_response(self, response: str) -> str:
        """Parse the agent response."""
        return response
