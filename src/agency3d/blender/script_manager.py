"""Manages Blender Python scripts generated by agents."""

import logging
from datetime import datetime
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)


class ScriptManager:
    """Manages the lifecycle of generated Blender scripts."""

    def __init__(self, output_dir: Path):
        """
        Initialize the script manager.

        Args:
            output_dir: Base output directory for scripts
        """
        self.output_dir = output_dir
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def create_session_dir(self, session_name: Optional[str] = None) -> Path:
        """
        Create a new session directory for a generation run.

        Args:
            session_name: Optional name for the session

        Returns:
            Path to the session directory
        """
        if session_name is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            session_name = f"session_{timestamp}"

        session_dir = self.output_dir / session_name
        session_dir.mkdir(parents=True, exist_ok=True)

        # Create subdirectories
        (session_dir / "scripts").mkdir(exist_ok=True)
        (session_dir / "renders").mkdir(exist_ok=True)
        (session_dir / "logs").mkdir(exist_ok=True)

        logger.info(f"Created session directory: {session_dir}")
        return session_dir

    def save_script(
        self,
        script_content: str,
        script_name: str,
        session_dir: Path,
    ) -> Path:
        """
        Save a generated script to the session directory.

        Args:
            script_content: The Python script content
            script_name: Name for the script file
            session_dir: Session directory path

        Returns:
            Path to the saved script
        """
        scripts_dir = session_dir / "scripts"
        scripts_dir.mkdir(exist_ok=True)

        script_path = scripts_dir / f"{script_name}.py"
        script_path.write_text(script_content)

        logger.info(f"Saved script: {script_path}")
        return script_path

    def combine_scripts(
        self,
        script_paths: list[Path],
        output_name: str,
        session_dir: Path,
    ) -> Path:
        """
        Combine multiple scripts into a single file.

        Args:
            script_paths: List of script paths to combine
            output_name: Name for the combined script
            session_dir: Session directory path

        Returns:
            Path to the combined script
        """
        scripts_dir = session_dir / "scripts"
        combined_path = scripts_dir / f"{output_name}.py"

        combined_content = []
        combined_content.append("# Combined Blender script generated by 3DAgency\n")
        combined_content.append(f"# Generated: {datetime.now().isoformat()}\n\n")

        for i, script_path in enumerate(script_paths, 1):
            combined_content.append(f"\n# ===== Script {i}: {script_path.name} =====\n")
            combined_content.append(script_path.read_text())
            combined_content.append("\n")

        combined_path.write_text("\n".join(combined_content))
        logger.info(f"Combined {len(script_paths)} scripts into {combined_path}")

        return combined_path

    def save_concept(self, concept: str, session_dir: Path) -> Path:
        """
        Save the scene concept to the session directory.

        Args:
            concept: The scene concept text
            session_dir: Session directory path

        Returns:
            Path to the saved concept file
        """
        concept_path = session_dir / "concept.md"
        concept_path.write_text(concept)
        logger.info(f"Saved concept: {concept_path}")
        return concept_path

    def save_metadata(
        self,
        metadata: dict,
        session_dir: Path,
    ) -> Path:
        """
        Save session metadata as JSON.

        Args:
            metadata: Metadata dictionary
            session_dir: Session directory path

        Returns:
            Path to the metadata file
        """
        import json

        metadata_path = session_dir / "metadata.json"
        metadata_path.write_text(json.dumps(metadata, indent=2, default=str))
        logger.info(f"Saved metadata: {metadata_path}")
        return metadata_path
