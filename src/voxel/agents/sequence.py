"""Sequence agent for video editing and multi-shot sequences."""

import logging
from typing import Dict, Any

from voxel.core.agent import Agent, AgentRole, AgentConfig

logger = logging.getLogger(__name__)


class SequenceAgent(Agent):
    """Agent responsible for creating video sequences and multi-shot editing."""

    def __init__(self, config: AgentConfig, context=None):
        super().__init__(AgentRole.SEQUENCE, config, context)

    def get_system_prompt(self) -> str:
        """Get the system prompt for the sequence agent."""
        return """You are a Blender Video Sequence Editor (VSE) expert. Your job is to create multi-shot video sequences, transitions, and video editing effects.

## Your Capabilities:
- Set up video sequence editor
- Create multi-shot sequences
- Add transitions between shots
- Implement video effects and filters
- Create title sequences and text overlays
- Add audio synchronization
- Set up render settings for video output
- Create storyboard-style sequences

## Blender VSE API:

### Enable VSE:
scene = bpy.context.scene
if not scene.sequence_editor:
    scene.sequence_editor_create()

seq_editor = scene.sequence_editor

### Add Video Strips:
# Add movie strip
seq_editor.sequences.new_movie(
    name="Shot1",
    filepath="/path/to/shot1.mp4",
    channel=1,
    frame_start=1,
    frame_final=250
)

# Add image strip
seq_editor.sequences.new_image(
    name="Title",
    filepath="/path/to/title.png",
    channel=2,
    frame_start=1
)

### Add Effects:
# Crossfade transition
seq_editor.sequences.new_effect(
    name="Crossfade",
    type='CROSS',
    channel=1,
    frame_start=200,
    frame_end=250,
    seq1=strip1,
    seq2=strip2
)

# Wipe transition
seq_editor.sequences.new_effect(
    name="Wipe",
    type='WIPE',
    channel=1,
    frame_start=200,
    frame_end=250,
    seq1=strip1,
    seq2=strip2
)

### Add Text:
# Text strip
text_strip = seq_editor.sequences.new_effect(
    name="Title_Text",
    type='TEXT',
    channel=3,
    frame_start=1,
    frame_end=100
)

text_strip.text = "Welcome to Voxel"
text_strip.font_size = 48
text_strip.color = (1, 1, 1, 1)

### Audio:
# Add sound strip
seq_editor.sequences.new_sound(
    name="Background_Music",
    filepath="/path/to/music.wav",
    channel=0,
    frame_start=1
)

## Guidelines:
1. Create logical shot progression
2. Use appropriate transitions for mood
3. Add text overlays for context
4. Synchronize audio with visuals
5. Set proper frame ranges and timing
6. Use multiple channels for layering
7. Add effects that enhance the story
8. Consider pacing and rhythm

Generate complete, working Blender Python scripts that create the requested video sequence."""

    def generate_script(self, scene_description: str, context: Dict[str, Any]) -> str:
        """Generate a Blender script for video sequencing based on the scene description."""
        try:
            # Extract sequence requirements from scene description
            sequence_type = self._extract_sequence_requirements(scene_description, context)
            
            # Generate the sequence script
            script = f"""# Video Sequence Script Generated by Voxel SequenceAgent
# Scene: {scene_description}
# Sequence Type: {sequence_type}

import bpy
import os
from pathlib import Path

# Get scene and enable sequence editor
scene = bpy.context.scene
if not scene.sequence_editor:
    scene.sequence_editor_create()

seq_editor = scene.sequence_editor

# Clear existing sequences
for strip in seq_editor.sequences:
    seq_editor.sequences.remove(strip)

{self._create_sequence_setup(sequence_type, scene_description)}

{self._create_transitions(sequence_type)}

{self._create_effects_and_overlays(sequence_type)}

{self._create_audio_setup(sequence_type)}

{self._setup_render_settings()}

print("Video sequence setup complete: {sequence_type}")
"""
            
            return script
            
        except Exception as e:
            logger.error(f"Error generating sequence script: {e}")
            return f"# Error generating sequence script: {e}"

    def _extract_sequence_requirements(self, scene_description: str, context: Dict[str, Any]) -> str:
        """Extract sequence requirements from scene description."""
        # Check for cinematic keywords
        cinematic_keywords = ['cinematic', 'movie', 'film', 'trailer', 'sequence', 'shots']
        if any(keyword in scene_description.lower() for keyword in cinematic_keywords):
            return "cinematic_sequence"
        
        # Check for documentary keywords
        doc_keywords = ['documentary', 'explanation', 'tutorial', 'educational', 'presentation']
        if any(keyword in scene_description.lower() for keyword in doc_keywords):
            return "documentary_sequence"
        
        # Check for commercial keywords
        commercial_keywords = ['commercial', 'advertisement', 'promo', 'marketing', 'product']
        if any(keyword in scene_description.lower() for keyword in commercial_keywords):
            return "commercial_sequence"
        
        # Check for music video keywords
        music_keywords = ['music video', 'music', 'song', 'lyrics', 'performance']
        if any(keyword in scene_description.lower() for keyword in music_keywords):
            return "music_video_sequence"
        
        # Check for animation keywords
        animation_keywords = ['animation', 'animated', 'cartoon', 'character', 'story']
        if any(keyword in scene_description.lower() for keyword in animation_keywords):
            return "animation_sequence"
        
        return "basic_sequence"

    def _create_sequence_setup(self, sequence_type: str, scene_description: str) -> str:
        """Generate sequence setup based on type."""
        if sequence_type == "cinematic_sequence":
            return """
# Cinematic sequence setup
# Shot 1: Wide establishing shot
shot1 = seq_editor.sequences.new_effect(
    name="Wide_Shot",
    type='TEXT',
    channel=1,
    frame_start=1,
    frame_end=120
)
shot1.text = "Wide establishing shot"
shot1.font_size = 24

# Shot 2: Medium shot
shot2 = seq_editor.sequences.new_effect(
    name="Medium_Shot",
    type='TEXT',
    channel=1,
    frame_start=121,
    frame_end=240
)
shot2.text = "Medium shot - character focus"
shot2.font_size = 24

# Shot 3: Close-up
shot3 = seq_editor.sequences.new_effect(
    name="Close_Up",
    type='TEXT',
    channel=1,
    frame_start=241,
    frame_end=360
)
shot3.text = "Close-up - emotional moment"
shot3.font_size = 24

# Shot 4: Action sequence
shot4 = seq_editor.sequences.new_effect(
    name="Action_Shot",
    type='TEXT',
    channel=1,
    frame_start=361,
    frame_end=480
)
shot4.text = "Action sequence - dynamic movement"
shot4.font_size = 24
"""
        elif sequence_type == "documentary_sequence":
            return """
# Documentary sequence setup
# Title sequence
title = seq_editor.sequences.new_effect(
    name="Title",
    type='TEXT',
    channel=1,
    frame_start=1,
    frame_end=60
)
title.text = "Documentary Title"
title.font_size = 36
title.color = (1, 1, 1, 1)

# Introduction
intro = seq_editor.sequences.new_effect(
    name="Introduction",
    type='TEXT',
    channel=1,
    frame_start=61,
    frame_end=180
)
intro.text = "Introduction to the topic"
intro.font_size = 24

# Main content
content1 = seq_editor.sequences.new_effect(
    name="Content_1",
    type='TEXT',
    channel=1,
    frame_start=181,
    frame_end=300
)
content1.text = "Main content section 1"
content1.font_size = 24

content2 = seq_editor.sequences.new_effect(
    name="Content_2",
    type='TEXT',
    channel=1,
    frame_start=301,
    frame_end=420
)
content2.text = "Main content section 2"
content2.font_size = 24

# Conclusion
conclusion = seq_editor.sequences.new_effect(
    name="Conclusion",
    type='TEXT',
    channel=1,
    frame_start=421,
    frame_end=480
)
conclusion.text = "Conclusion and credits"
conclusion.font_size = 24
"""
        elif sequence_type == "music_video_sequence":
            return """
# Music video sequence setup
# Intro with title
intro = seq_editor.sequences.new_effect(
    name="Intro",
    type='TEXT',
    channel=1,
    frame_start=1,
    frame_end=60
)
intro.text = "Song Title"
intro.font_size = 48
intro.color = (1, 1, 1, 1)

# Verse 1
verse1 = seq_editor.sequences.new_effect(
    name="Verse_1",
    type='TEXT',
    channel=1,
    frame_start=61,
    frame_end=180
)
verse1.text = "Verse 1 - Performance"
verse1.font_size = 24

# Chorus
chorus1 = seq_editor.sequences.new_effect(
    name="Chorus_1",
    type='TEXT',
    channel=1,
    frame_start=181,
    frame_end=240
)
chorus1.text = "CHORUS - High energy"
chorus1.font_size = 32
chorus1.color = (1, 0.5, 0.5, 1)

# Verse 2
verse2 = seq_editor.sequences.new_effect(
    name="Verse_2",
    type='TEXT',
    channel=1,
    frame_start=241,
    frame_end=360
)
verse2.text = "Verse 2 - Story continues"
verse2.font_size = 24

# Chorus 2
chorus2 = seq_editor.sequences.new_effect(
    name="Chorus_2",
    type='TEXT',
    channel=1,
    frame_start=361,
    frame_end=420
)
chorus2.text = "CHORUS - Climax"
chorus2.font_size = 32
chorus2.color = (1, 0.5, 0.5, 1)

# Outro
outro = seq_editor.sequences.new_effect(
    name="Outro",
    type='TEXT',
    channel=1,
    frame_start=421,
    frame_end=480
)
outro.text = "Outro - Fade out"
outro.font_size = 24
"""
        else:  # basic_sequence
            return """
# Basic sequence setup
# Shot 1
shot1 = seq_editor.sequences.new_effect(
    name="Shot_1",
    type='TEXT',
    channel=1,
    frame_start=1,
    frame_end=120
)
shot1.text = "Shot 1"
shot1.font_size = 24

# Shot 2
shot2 = seq_editor.sequences.new_effect(
    name="Shot_2",
    type='TEXT',
    channel=1,
    frame_start=121,
    frame_end=240
)
shot2.text = "Shot 2"
shot2.font_size = 24

# Shot 3
shot3 = seq_editor.sequences.new_effect(
    name="Shot_3",
    type='TEXT',
    channel=1,
    frame_start=241,
    frame_end=360
)
shot3.text = "Shot 3"
shot3.font_size = 24
"""

    def _create_transitions(self, sequence_type: str) -> str:
        """Generate transitions based on sequence type."""
        if sequence_type == "cinematic_sequence":
            return """
# Cinematic transitions
# Crossfade between shots
crossfade1 = seq_editor.sequences.new_effect(
    name="Crossfade_1",
    type='CROSS',
    channel=1,
    frame_start=100,
    frame_end=140,
    seq1=shot1,
    seq2=shot2
)

crossfade2 = seq_editor.sequences.new_effect(
    name="Crossfade_2",
    type='CROSS',
    channel=1,
    frame_start=220,
    frame_end=260,
    seq1=shot2,
    seq2=shot3
)

# Wipe transition for action
wipe1 = seq_editor.sequences.new_effect(
    name="Wipe_1",
    type='WIPE',
    channel=1,
    frame_start=340,
    frame_end=380,
    seq1=shot3,
    seq2=shot4
)
"""
        elif sequence_type == "music_video_sequence":
            return """
# Music video transitions
# Quick cuts for energy
cut1 = seq_editor.sequences.new_effect(
    name="Cut_1",
    type='CROSS',
    channel=1,
    frame_start=50,
    frame_end=70,
    seq1=intro,
    seq2=verse1
)

# Smooth transition to chorus
smooth1 = seq_editor.sequences.new_effect(
    name="Smooth_1",
    type='CROSS',
    channel=1,
    frame_start=160,
    frame_end=200,
    seq1=verse1,
    seq2=chorus1
)

# Quick cut for chorus impact
cut2 = seq_editor.sequences.new_effect(
    name="Cut_2",
    type='CROSS',
    channel=1,
    frame_start=230,
    frame_end=250,
    seq1=chorus1,
    seq2=verse2
)
"""
        else:
            return """
# Basic transitions
# Simple crossfades
crossfade1 = seq_editor.sequences.new_effect(
    name="Crossfade_1",
    type='CROSS',
    channel=1,
    frame_start=100,
    frame_end=140,
    seq1=shot1,
    seq2=shot2
)

crossfade2 = seq_editor.sequences.new_effect(
    name="Crossfade_2",
    type='CROSS',
    channel=1,
    frame_start=220,
    frame_end=260,
    seq1=shot2,
    seq2=shot3
)
"""

    def _create_effects_and_overlays(self, sequence_type: str) -> str:
        """Generate effects and overlays based on sequence type."""
        if sequence_type == "cinematic_sequence":
            return """
# Cinematic effects and overlays
# Title overlay
title_overlay = seq_editor.sequences.new_effect(
    name="Title_Overlay",
    type='TEXT',
    channel=2,
    frame_start=1,
    frame_end=60
)
title_overlay.text = "CINEMATIC TITLE"
title_overlay.font_size = 48
title_overlay.color = (1, 1, 1, 1)

# Fade in effect
fade_in = seq_editor.sequences.new_effect(
    name="Fade_In",
    type='ALPHA_OVER',
    channel=2,
    frame_start=1,
    frame_end=30
)

# Fade out effect
fade_out = seq_editor.sequences.new_effect(
    name="Fade_Out",
    type='ALPHA_OVER',
    channel=2,
    frame_start=450,
    frame_end=480
)
"""
        elif sequence_type == "documentary_sequence":
            return """
# Documentary effects and overlays
# Lower third graphics
lower_third1 = seq_editor.sequences.new_effect(
    name="Lower_Third_1",
    type='TEXT',
    channel=2,
    frame_start=61,
    frame_end=180
)
lower_third1.text = "Expert Name - Title"
lower_third1.font_size = 20
lower_third1.color = (0.2, 0.6, 1, 1)

# Information overlay
info_overlay = seq_editor.sequences.new_effect(
    name="Info_Overlay",
    type='TEXT',
    channel=2,
    frame_start=181,
    frame_end=300
)
info_overlay.text = "Key Information"
info_overlay.font_size = 18
info_overlay.color = (1, 1, 1, 1)
"""
        else:
            return """
# Basic effects and overlays
# Simple title
title = seq_editor.sequences.new_effect(
    name="Title",
    type='TEXT',
    channel=2,
    frame_start=1,
    frame_end=60
)
title.text = "Video Title"
title.font_size = 32
title.color = (1, 1, 1, 1)
"""

    def _create_audio_setup(self, sequence_type: str) -> str:
        """Generate audio setup based on sequence type."""
        if sequence_type == "music_video_sequence":
            return """
# Music video audio setup
# Background music
music = seq_editor.sequences.new_sound(
    name="Background_Music",
    filepath="/tmp/voxel_audio/music.wav",
    channel=0,
    frame_start=1
)

# Audio effects
audio_effect1 = seq_editor.sequences.new_effect(
    name="Audio_Effect_1",
    type='SOUND',
    channel=0,
    frame_start=1,
    frame_end=480
)
"""
        else:
            return """
# Basic audio setup
# Background music
music = seq_editor.sequences.new_sound(
    name="Background_Music",
    filepath="/tmp/voxel_audio/background.wav",
    channel=0,
    frame_start=1
)

# Audio fade in/out
audio_fade_in = seq_editor.sequences.new_effect(
    name="Audio_Fade_In",
    type='SOUND',
    channel=0,
    frame_start=1,
    frame_end=30
)

audio_fade_out = seq_editor.sequences.new_effect(
    name="Audio_Fade_Out",
    type='SOUND',
    channel=0,
    frame_start=450,
    frame_end=480
)
"""

    def _setup_render_settings(self) -> str:
        """Generate render settings for video output."""
        return """
# Video render settings
scene.render.resolution_x = 1920
scene.render.resolution_y = 1080
scene.render.resolution_percentage = 100
scene.render.fps = 24
scene.render.fps_base = 1

# Video codec settings
scene.render.image_settings.file_format = 'FFMPEG'
scene.render.ffmpeg.format = 'MPEG4'
scene.render.ffmpeg.codec = 'H264'
scene.render.ffmpeg.constant_rate_factor = 'HIGH'

# Output settings
scene.render.filepath = "/tmp/voxel_output/sequence_output"
scene.frame_start = 1
scene.frame_end = 480

print("Video sequence render settings configured")
"""
    
    def _parse_response(self, response: str) -> str:
        """Parse the agent response."""
        return response
